
avr128da48-cnano-rtc-oled-bare.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000022a  00804000  0000110e  000011a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000110e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080422a  0080422a  000013cc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001428  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000348  00000000  00000000  00001468  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007d8e  00000000  00000000  000017b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003c38  00000000  00000000  0000953e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e84  00000000  00000000  0000d176  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008dc  00000000  00000000  0000effc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003746  00000000  00000000  0000f8d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f10  00000000  00000000  0001301e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000288  00000000  00000000  00015f2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 76 00 	jmp	0xec	; 0xec <__ctors_end>
       4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
       8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
       c:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__vector_3>
      10:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      14:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      18:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      1c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      20:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      24:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      28:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      2c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      30:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      34:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      38:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      3c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      40:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      44:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      48:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      4c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      50:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      54:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      58:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      5c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      60:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      64:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      68:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      6c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      70:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      74:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      78:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      7c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      80:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      84:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      88:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      8c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      90:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      94:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      98:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      9c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      a0:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      a4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      a8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      ac:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      b0:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      b4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      b8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      bc:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      c0:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      c4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      c8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      cc:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      d0:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      d4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      d8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      dc:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      e0:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      e4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      e8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>

000000ec <__ctors_end>:
      ec:	11 24       	eor	r1, r1
      ee:	1f be       	out	0x3f, r1	; 63
      f0:	cf ef       	ldi	r28, 0xFF	; 255
      f2:	cd bf       	out	0x3d, r28	; 61
      f4:	df e7       	ldi	r29, 0x7F	; 127
      f6:	de bf       	out	0x3e, r29	; 62

000000f8 <__do_copy_data>:
      f8:	12 e4       	ldi	r17, 0x42	; 66
      fa:	a0 e0       	ldi	r26, 0x00	; 0
      fc:	b0 e4       	ldi	r27, 0x40	; 64
      fe:	ee e0       	ldi	r30, 0x0E	; 14
     100:	f1 e1       	ldi	r31, 0x11	; 17
     102:	00 e0       	ldi	r16, 0x00	; 0
     104:	0b bf       	out	0x3b, r16	; 59
     106:	02 c0       	rjmp	.+4      	; 0x10c <__do_copy_data+0x14>
     108:	07 90       	elpm	r0, Z+
     10a:	0d 92       	st	X+, r0
     10c:	aa 32       	cpi	r26, 0x2A	; 42
     10e:	b1 07       	cpc	r27, r17
     110:	d9 f7       	brne	.-10     	; 0x108 <__do_copy_data+0x10>

00000112 <__do_clear_bss>:
     112:	22 e4       	ldi	r18, 0x42	; 66
     114:	aa e2       	ldi	r26, 0x2A	; 42
     116:	b2 e4       	ldi	r27, 0x42	; 66
     118:	01 c0       	rjmp	.+2      	; 0x11c <.do_clear_bss_start>

0000011a <.do_clear_bss_loop>:
     11a:	1d 92       	st	X+, r1

0000011c <.do_clear_bss_start>:
     11c:	a4 33       	cpi	r26, 0x34	; 52
     11e:	b2 07       	cpc	r27, r18
     120:	e1 f7       	brne	.-8      	; 0x11a <.do_clear_bss_loop>
     122:	0e 94 22 01 	call	0x244	; 0x244 <main>
     126:	0c 94 85 08 	jmp	0x110a	; 0x110a <_exit>

0000012a <__bad_interrupt>:
     12a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012e <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     12e:	0e 94 45 03 	call	0x68a	; 0x68a <system_init>
     132:	08 95       	ret

00000134 <CLOCK_updateTime>:
uint8_t hour = 0;
selection_t selection = SECONDS_SELECTED;

void CLOCK_updateTime(void)
{
    sec++;
     134:	80 91 2d 42 	lds	r24, 0x422D	; 0x80422d <sec>
     138:	8f 5f       	subi	r24, 0xFF	; 255
    if(sec >= 60)
     13a:	8c 33       	cpi	r24, 0x3C	; 60
     13c:	18 f4       	brcc	.+6      	; 0x144 <CLOCK_updateTime+0x10>
uint8_t hour = 0;
selection_t selection = SECONDS_SELECTED;

void CLOCK_updateTime(void)
{
    sec++;
     13e:	80 93 2d 42 	sts	0x422D, r24	; 0x80422d <sec>
     142:	16 c0       	rjmp	.+44     	; 0x170 <CLOCK_updateTime+0x3c>
    if(sec >= 60)
    {
        sec = 0;
     144:	10 92 2d 42 	sts	0x422D, r1	; 0x80422d <sec>
        min++;
     148:	80 91 2c 42 	lds	r24, 0x422C	; 0x80422c <min>
     14c:	8f 5f       	subi	r24, 0xFF	; 255
        if(min >= 60)
     14e:	8c 33       	cpi	r24, 0x3C	; 60
     150:	18 f4       	brcc	.+6      	; 0x158 <CLOCK_updateTime+0x24>
{
    sec++;
    if(sec >= 60)
    {
        sec = 0;
        min++;
     152:	80 93 2c 42 	sts	0x422C, r24	; 0x80422c <min>
     156:	0c c0       	rjmp	.+24     	; 0x170 <CLOCK_updateTime+0x3c>
        if(min >= 60)
        {
            min = 0;
     158:	10 92 2c 42 	sts	0x422C, r1	; 0x80422c <min>
            hour++;
     15c:	80 91 2b 42 	lds	r24, 0x422B	; 0x80422b <hour>
     160:	8f 5f       	subi	r24, 0xFF	; 255
            if(hour >= 24)
     162:	88 31       	cpi	r24, 0x18	; 24
     164:	18 f4       	brcc	.+6      	; 0x16c <CLOCK_updateTime+0x38>
        sec = 0;
        min++;
        if(min >= 60)
        {
            min = 0;
            hour++;
     166:	80 93 2b 42 	sts	0x422B, r24	; 0x80422b <hour>
     16a:	02 c0       	rjmp	.+4      	; 0x170 <CLOCK_updateTime+0x3c>
            if(hour >= 24)
            {
                hour = 0;
     16c:	10 92 2b 42 	sts	0x422B, r1	; 0x80422b <hour>
            }
        }
    }
    OLED_displayTime(hour,min,sec);
     170:	40 91 2d 42 	lds	r20, 0x422D	; 0x80422d <sec>
     174:	60 91 2c 42 	lds	r22, 0x422C	; 0x80422c <min>
     178:	80 91 2b 42 	lds	r24, 0x422B	; 0x80422b <hour>
     17c:	0e 94 89 01 	call	0x312	; 0x312 <OLED_displayTime>
     180:	08 95       	ret

00000182 <CLOCK_updateSelectedUnit>:
}

void CLOCK_updateSelectedUnit(void)
{
    if(selection == SECONDS_SELECTED)
     182:	80 91 2a 42 	lds	r24, 0x422A	; 0x80422a <__data_end>
     186:	81 11       	cpse	r24, r1
     188:	08 c0       	rjmp	.+16     	; 0x19a <CLOCK_updateSelectedUnit+0x18>
    {
        sec++;
     18a:	80 91 2d 42 	lds	r24, 0x422D	; 0x80422d <sec>
     18e:	8f 5f       	subi	r24, 0xFF	; 255
        if(sec >= 60){
     190:	8c 33       	cpi	r24, 0x3C	; 60
     192:	10 f1       	brcs	.+68     	; 0x1d8 <CLOCK_updateSelectedUnit+0x56>
            sec = 0;
     194:	10 92 2d 42 	sts	0x422D, r1	; 0x80422d <sec>
     198:	16 c0       	rjmp	.+44     	; 0x1c6 <CLOCK_updateSelectedUnit+0x44>
        }
    }
    if(selection == MINUTES_SELECTED)
     19a:	81 30       	cpi	r24, 0x01	; 1
     19c:	41 f4       	brne	.+16     	; 0x1ae <CLOCK_updateSelectedUnit+0x2c>
    {
        min++;
     19e:	80 91 2c 42 	lds	r24, 0x422C	; 0x80422c <min>
     1a2:	8f 5f       	subi	r24, 0xFF	; 255
        if(min >= 60){
     1a4:	8c 33       	cpi	r24, 0x3C	; 60
     1a6:	d8 f0       	brcs	.+54     	; 0x1de <CLOCK_updateSelectedUnit+0x5c>
            min = 0;
     1a8:	10 92 2c 42 	sts	0x422C, r1	; 0x80422c <min>
     1ac:	0c c0       	rjmp	.+24     	; 0x1c6 <CLOCK_updateSelectedUnit+0x44>
        }
    }
    if(selection == HOURS_SELECTED)
     1ae:	82 30       	cpi	r24, 0x02	; 2
     1b0:	51 f4       	brne	.+20     	; 0x1c6 <CLOCK_updateSelectedUnit+0x44>
    {
        hour++;
     1b2:	80 91 2b 42 	lds	r24, 0x422B	; 0x80422b <hour>
     1b6:	8f 5f       	subi	r24, 0xFF	; 255
        if(hour >= 24){
     1b8:	88 31       	cpi	r24, 0x18	; 24
     1ba:	18 f4       	brcc	.+6      	; 0x1c2 <CLOCK_updateSelectedUnit+0x40>
            min = 0;
        }
    }
    if(selection == HOURS_SELECTED)
    {
        hour++;
     1bc:	80 93 2b 42 	sts	0x422B, r24	; 0x80422b <hour>
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <CLOCK_updateSelectedUnit+0x44>
        if(hour >= 24){
            hour = 0;
     1c2:	10 92 2b 42 	sts	0x422B, r1	; 0x80422b <hour>
        }
    }
    OLED_displayTime(hour,min,sec);
     1c6:	40 91 2d 42 	lds	r20, 0x422D	; 0x80422d <sec>
     1ca:	60 91 2c 42 	lds	r22, 0x422C	; 0x80422c <min>
     1ce:	80 91 2b 42 	lds	r24, 0x422B	; 0x80422b <hour>
     1d2:	0e 94 89 01 	call	0x312	; 0x312 <OLED_displayTime>
}
     1d6:	08 95       	ret

void CLOCK_updateSelectedUnit(void)
{
    if(selection == SECONDS_SELECTED)
    {
        sec++;
     1d8:	80 93 2d 42 	sts	0x422D, r24	; 0x80422d <sec>
     1dc:	f4 cf       	rjmp	.-24     	; 0x1c6 <CLOCK_updateSelectedUnit+0x44>
            sec = 0;
        }
    }
    if(selection == MINUTES_SELECTED)
    {
        min++;
     1de:	80 93 2c 42 	sts	0x422C, r24	; 0x80422c <min>
     1e2:	f1 cf       	rjmp	.-30     	; 0x1c6 <CLOCK_updateSelectedUnit+0x44>

000001e4 <CLOCK_updateSelection>:
    OLED_displayTime(hour,min,sec);
}

void CLOCK_updateSelection(void)
{
    selection++;
     1e4:	80 91 2a 42 	lds	r24, 0x422A	; 0x80422a <__data_end>
     1e8:	8f 5f       	subi	r24, 0xFF	; 255
    if(selection == NO_SELECTION)
     1ea:	83 30       	cpi	r24, 0x03	; 3
     1ec:	19 f0       	breq	.+6      	; 0x1f4 <CLOCK_updateSelection+0x10>
    OLED_displayTime(hour,min,sec);
}

void CLOCK_updateSelection(void)
{
    selection++;
     1ee:	80 93 2a 42 	sts	0x422A, r24	; 0x80422a <__data_end>
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <CLOCK_updateSelection+0x14>
    if(selection == NO_SELECTION)
    {
        selection = SECONDS_SELECTED;
     1f4:	10 92 2a 42 	sts	0x422A, r1	; 0x80422a <__data_end>
    }
    OLED_displaySelection(selection);
     1f8:	80 91 2a 42 	lds	r24, 0x422A	; 0x80422a <__data_end>
     1fc:	0e 94 73 02 	call	0x4e6	; 0x4e6 <OLED_displaySelection>
    OLED_displayTime(hour,min,sec);
     200:	40 91 2d 42 	lds	r20, 0x422D	; 0x80422d <sec>
     204:	60 91 2c 42 	lds	r22, 0x422C	; 0x80422c <min>
     208:	80 91 2b 42 	lds	r24, 0x422B	; 0x80422b <hour>
     20c:	0e 94 89 01 	call	0x312	; 0x312 <OLED_displayTime>
     210:	08 95       	ret

00000212 <OSCSetup>:
    }
}

void OSCSetup(void)
{
	ccp_write_io((void *)&(CLKCTRL.OSCHFCTRLA),CLKCTRL_FREQSEL_24M_gc);
     212:	64 e2       	ldi	r22, 0x24	; 36
     214:	70 e0       	ldi	r23, 0x00	; 0
     216:	88 e6       	ldi	r24, 0x68	; 104
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	0e 94 7f 08 	call	0x10fe	; 0x10fe <ccp_write_io>
     21e:	08 95       	ret

00000220 <buttonInit>:
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     220:	47 98       	cbi	0x08, 7	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     222:	e7 e5       	ldi	r30, 0x57	; 87
     224:	f4 e0       	ldi	r31, 0x04	; 4
     226:	80 81       	ld	r24, Z
     228:	88 60       	ori	r24, 0x08	; 8
     22a:	80 83       	st	Z, r24
     22c:	08 95       	ret

0000022e <RTCInit>:
    PORTC_set_pin_pull_mode(PIN7_bp, PORT_PULL_UP);
}

void RTCInit(void)
{
    RTC.CTRLA = 1 << RTC_RTCEN_bp;     
     22e:	e0 e4       	ldi	r30, 0x40	; 64
     230:	f1 e0       	ldi	r31, 0x01	; 1
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	80 83       	st	Z, r24
    RTC.PER = ONE_SECOND_PERIOD; 
     236:	2f ef       	ldi	r18, 0xFF	; 255
     238:	33 e0       	ldi	r19, 0x03	; 3
     23a:	22 87       	std	Z+10, r18	; 0x0a
     23c:	33 87       	std	Z+11, r19	; 0x0b
    RTC.CLKSEL = RTC_CLKSEL_OSC1K_gc;
     23e:	87 83       	std	Z+7, r24	; 0x07
    RTC.INTCTRL = 1 << RTC_OVF_bp;
     240:	82 83       	std	Z+2, r24	; 0x02
     242:	08 95       	ret

00000244 <main>:
uint8_t volatile second_passed = 0;
button_t button_state = BT_NOCHANGE;

int main(void)
{
    OSCSetup();
     244:	0e 94 09 01 	call	0x212	; 0x212 <OSCSetup>
    atmel_start_init();
     248:	0e 94 97 00 	call	0x12e	; 0x12e <atmel_start_init>
    buttonInit();
     24c:	0e 94 10 01 	call	0x220	; 0x220 <buttonInit>
    RTCInit();
     250:	0e 94 17 01 	call	0x22e	; 0x22e <RTCInit>
    sei();
     254:	78 94       	sei
    oledC_setup();
     256:	0e 94 1f 04 	call	0x83e	; 0x83e <oledC_setup>
    OLED_displayInit();
     25a:	0e 94 bd 02 	call	0x57a	; 0x57a <OLED_displayInit>
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTC_get_pin_level(const uint8_t pin)
{
	return VPORTC.IN & (1 << pin);
     25e:	8a b1       	in	r24, 0x0a	; 10
     260:	80 78       	andi	r24, 0x80	; 128
     262:	91 e0       	ldi	r25, 0x01	; 1
     264:	09 f4       	brne	.+2      	; 0x268 <main+0x24>
     266:	90 e0       	ldi	r25, 0x00	; 0
    button_t result = BT_NOCHANGE;
    uint8_t counter = 0;
    static bool old_button_state = !BUTTON_PRESSED;
    bool button_state = PORTC_get_pin_level(PIN7_bp);
    /* detecting only the button-press event */
    if( (button_state == BUTTON_PRESSED) && (old_button_state != BUTTON_PRESSED) )
     268:	81 11       	cpse	r24, r1
     26a:	20 c0       	rjmp	.+64     	; 0x2ac <main+0x68>
     26c:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
     270:	88 23       	and	r24, r24
     272:	f1 f0       	breq	.+60     	; 0x2b0 <main+0x6c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     274:	ef e5       	ldi	r30, 0x5F	; 95
     276:	fa ee       	ldi	r31, 0xEA	; 234
     278:	31 97       	sbiw	r30, 0x01	; 1
     27a:	f1 f7       	brne	.-4      	; 0x278 <main+0x34>
     27c:	00 c0       	rjmp	.+0      	; 0x27e <main+0x3a>
     27e:	00 00       	nop
    {
        /*  wait for debouncing time */
        _delay_ms(BUTTON_TIME_STEP);
        while( (PORTC_get_pin_level(PIN7_bp) == BUTTON_PRESSED) && \
     280:	57 99       	sbic	0x0a, 7	; 10
     282:	18 c0       	rjmp	.+48     	; 0x2b4 <main+0x70>
     284:	80 e0       	ldi	r24, 0x00	; 0
                (counter < (BUTTON_LONG_PRESS_THRESHOLD/BUTTON_TIME_STEP)) )
        {
            /* then stay in the loop until either */
            /* is button released or long-press encountered*/
            counter++;
     286:	8f 5f       	subi	r24, 0xFF	; 255
     288:	ef e5       	ldi	r30, 0x5F	; 95
     28a:	fa ee       	ldi	r31, 0xEA	; 234
     28c:	31 97       	sbiw	r30, 0x01	; 1
     28e:	f1 f7       	brne	.-4      	; 0x28c <main+0x48>
     290:	00 c0       	rjmp	.+0      	; 0x292 <main+0x4e>
     292:	00 00       	nop
    /* detecting only the button-press event */
    if( (button_state == BUTTON_PRESSED) && (old_button_state != BUTTON_PRESSED) )
    {
        /*  wait for debouncing time */
        _delay_ms(BUTTON_TIME_STEP);
        while( (PORTC_get_pin_level(PIN7_bp) == BUTTON_PRESSED) && \
     294:	57 99       	sbic	0x0a, 7	; 10
     296:	04 c0       	rjmp	.+8      	; 0x2a0 <main+0x5c>
     298:	84 36       	cpi	r24, 0x64	; 100
     29a:	a9 f7       	brne	.-22     	; 0x286 <main+0x42>
        }
        if(counter)
        {
            result = BT_SHORT_PRESS;
            if(counter >= (BUTTON_LONG_PRESS_THRESHOLD/BUTTON_TIME_STEP))
                result = BT_LONG_PRESS;
     29c:	82 e0       	ldi	r24, 0x02	; 2
     29e:	0f c0       	rjmp	.+30     	; 0x2be <main+0x7a>
            /* then stay in the loop until either */
            /* is button released or long-press encountered*/
            counter++;
            _delay_ms(BUTTON_TIME_STEP);
        }
        if(counter)
     2a0:	88 23       	and	r24, r24
     2a2:	51 f0       	breq	.+20     	; 0x2b8 <main+0x74>
        {
            result = BT_SHORT_PRESS;
            if(counter >= (BUTTON_LONG_PRESS_THRESHOLD/BUTTON_TIME_STEP))
     2a4:	84 36       	cpi	r24, 0x64	; 100
     2a6:	50 f0       	brcs	.+20     	; 0x2bc <main+0x78>
                result = BT_LONG_PRESS;
     2a8:	82 e0       	ldi	r24, 0x02	; 2
     2aa:	09 c0       	rjmp	.+18     	; 0x2be <main+0x7a>
    RTC.INTCTRL = 1 << RTC_OVF_bp;
}

static button_t buttonCheck(void)
{
    button_t result = BT_NOCHANGE;
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	07 c0       	rjmp	.+14     	; 0x2be <main+0x7a>
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	05 c0       	rjmp	.+10     	; 0x2be <main+0x7a>
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	03 c0       	rjmp	.+6      	; 0x2be <main+0x7a>
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	01 c0       	rjmp	.+2      	; 0x2be <main+0x7a>
            counter++;
            _delay_ms(BUTTON_TIME_STEP);
        }
        if(counter)
        {
            result = BT_SHORT_PRESS;
     2bc:	81 e0       	ldi	r24, 0x01	; 1
            if(counter >= (BUTTON_LONG_PRESS_THRESHOLD/BUTTON_TIME_STEP))
                result = BT_LONG_PRESS;
        }
    }
    old_button_state = button_state;
     2be:	90 93 00 40 	sts	0x4000, r25	; 0x804000 <__DATA_REGION_ORIGIN__>
    sei();
    oledC_setup();
    OLED_displayInit();

    while (1){
        button_state = buttonCheck();
     2c2:	80 93 2e 42 	sts	0x422E, r24	; 0x80422e <button_state>
        if(second_passed == 1)
     2c6:	80 91 2f 42 	lds	r24, 0x422F	; 0x80422f <second_passed>
     2ca:	81 30       	cpi	r24, 0x01	; 1
     2cc:	21 f4       	brne	.+8      	; 0x2d6 <main+0x92>
        {
            CLOCK_updateTime();
     2ce:	0e 94 9a 00 	call	0x134	; 0x134 <CLOCK_updateTime>
            second_passed = 0;
     2d2:	10 92 2f 42 	sts	0x422F, r1	; 0x80422f <second_passed>
        }
        if(button_state == BT_SHORT_PRESS)
     2d6:	80 91 2e 42 	lds	r24, 0x422E	; 0x80422e <button_state>
     2da:	81 30       	cpi	r24, 0x01	; 1
     2dc:	19 f4       	brne	.+6      	; 0x2e4 <main+0xa0>
        {
            CLOCK_updateSelectedUnit();
     2de:	0e 94 c1 00 	call	0x182	; 0x182 <CLOCK_updateSelectedUnit>
     2e2:	bd cf       	rjmp	.-134    	; 0x25e <main+0x1a>
        }
        else if(button_state == BT_LONG_PRESS)
     2e4:	82 30       	cpi	r24, 0x02	; 2
     2e6:	09 f0       	breq	.+2      	; 0x2ea <main+0xa6>
     2e8:	ba cf       	rjmp	.-140    	; 0x25e <main+0x1a>
        {
            CLOCK_updateSelection();
     2ea:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <CLOCK_updateSelection>
     2ee:	b7 cf       	rjmp	.-146    	; 0x25e <main+0x1a>

000002f0 <__vector_3>:
    old_button_state = button_state;
    return result;
}

ISR(RTC_CNT_vect)
{
     2f0:	1f 92       	push	r1
     2f2:	0f 92       	push	r0
     2f4:	0f b6       	in	r0, 0x3f	; 63
     2f6:	0f 92       	push	r0
     2f8:	11 24       	eor	r1, r1
     2fa:	8f 93       	push	r24
    second_passed = 1;
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	80 93 2f 42 	sts	0x422F, r24	; 0x80422f <second_passed>
    RTC.INTFLAGS = RTC_OVF_bm;
     302:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
}
     306:	8f 91       	pop	r24
     308:	0f 90       	pop	r0
     30a:	0f be       	out	0x3f, r0	; 63
     30c:	0f 90       	pop	r0
     30e:	1f 90       	pop	r1
     310:	18 95       	reti

00000312 <OLED_displayTime>:
}

void OLED_setBackground(uint16_t color)
{
    background_color = color;
    OLED_clearScreen();
     312:	ef 92       	push	r14
     314:	ff 92       	push	r15
     316:	0f 93       	push	r16
     318:	1f 93       	push	r17
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	cd b7       	in	r28, 0x3d	; 61
     320:	de b7       	in	r29, 0x3e	; 62
     322:	2a 97       	sbiw	r28, 0x0a	; 10
     324:	cd bf       	out	0x3d, r28	; 61
     326:	de bf       	out	0x3e, r29	; 62
     328:	8a 30       	cpi	r24, 0x0A	; 10
     32a:	08 f0       	brcs	.+2      	; 0x32e <OLED_displayTime+0x1c>
     32c:	52 c0       	rjmp	.+164    	; 0x3d2 <OLED_displayTime+0xc0>
     32e:	6a 30       	cpi	r22, 0x0A	; 10
     330:	40 f5       	brcc	.+80     	; 0x382 <OLED_displayTime+0x70>
     332:	4a 30       	cpi	r20, 0x0A	; 10
     334:	98 f4       	brcc	.+38     	; 0x35c <OLED_displayTime+0x4a>
     336:	1f 92       	push	r1
     338:	4f 93       	push	r20
     33a:	1f 92       	push	r1
     33c:	6f 93       	push	r22
     33e:	1f 92       	push	r1
     340:	8f 93       	push	r24
     342:	83 e0       	ldi	r24, 0x03	; 3
     344:	90 e4       	ldi	r25, 0x40	; 64
     346:	9f 93       	push	r25
     348:	8f 93       	push	r24
     34a:	ce 01       	movw	r24, r28
     34c:	01 96       	adiw	r24, 0x01	; 1
     34e:	9f 93       	push	r25
     350:	8f 93       	push	r24
     352:	0e 94 a2 05 	call	0xb44	; 0xb44 <sprintf>
     356:	cd bf       	out	0x3d, r28	; 61
     358:	de bf       	out	0x3e, r29	; 62
     35a:	8c c0       	rjmp	.+280    	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     35c:	1f 92       	push	r1
     35e:	4f 93       	push	r20
     360:	1f 92       	push	r1
     362:	6f 93       	push	r22
     364:	1f 92       	push	r1
     366:	8f 93       	push	r24
     368:	8f e0       	ldi	r24, 0x0F	; 15
     36a:	90 e4       	ldi	r25, 0x40	; 64
     36c:	9f 93       	push	r25
     36e:	8f 93       	push	r24
     370:	ce 01       	movw	r24, r28
     372:	01 96       	adiw	r24, 0x01	; 1
     374:	9f 93       	push	r25
     376:	8f 93       	push	r24
     378:	0e 94 a2 05 	call	0xb44	; 0xb44 <sprintf>
     37c:	cd bf       	out	0x3d, r28	; 61
     37e:	de bf       	out	0x3e, r29	; 62
     380:	79 c0       	rjmp	.+242    	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     382:	4a 30       	cpi	r20, 0x0A	; 10
     384:	98 f4       	brcc	.+38     	; 0x3ac <OLED_displayTime+0x9a>
     386:	1f 92       	push	r1
     388:	4f 93       	push	r20
     38a:	1f 92       	push	r1
     38c:	6f 93       	push	r22
     38e:	1f 92       	push	r1
     390:	8f 93       	push	r24
     392:	8a e1       	ldi	r24, 0x1A	; 26
     394:	90 e4       	ldi	r25, 0x40	; 64
     396:	9f 93       	push	r25
     398:	8f 93       	push	r24
     39a:	ce 01       	movw	r24, r28
     39c:	01 96       	adiw	r24, 0x01	; 1
     39e:	9f 93       	push	r25
     3a0:	8f 93       	push	r24
     3a2:	0e 94 a2 05 	call	0xb44	; 0xb44 <sprintf>
     3a6:	cd bf       	out	0x3d, r28	; 61
     3a8:	de bf       	out	0x3e, r29	; 62
     3aa:	64 c0       	rjmp	.+200    	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     3ac:	1f 92       	push	r1
     3ae:	4f 93       	push	r20
     3b0:	1f 92       	push	r1
     3b2:	6f 93       	push	r22
     3b4:	1f 92       	push	r1
     3b6:	8f 93       	push	r24
     3b8:	85 e2       	ldi	r24, 0x25	; 37
     3ba:	90 e4       	ldi	r25, 0x40	; 64
     3bc:	9f 93       	push	r25
     3be:	8f 93       	push	r24
     3c0:	ce 01       	movw	r24, r28
     3c2:	01 96       	adiw	r24, 0x01	; 1
     3c4:	9f 93       	push	r25
     3c6:	8f 93       	push	r24
     3c8:	0e 94 a2 05 	call	0xb44	; 0xb44 <sprintf>
     3cc:	cd bf       	out	0x3d, r28	; 61
     3ce:	de bf       	out	0x3e, r29	; 62
     3d0:	51 c0       	rjmp	.+162    	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     3d2:	6a 30       	cpi	r22, 0x0A	; 10
     3d4:	40 f5       	brcc	.+80     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     3d6:	4a 30       	cpi	r20, 0x0A	; 10
     3d8:	98 f4       	brcc	.+38     	; 0x400 <__LOCK_REGION_LENGTH__>
     3da:	1f 92       	push	r1
     3dc:	4f 93       	push	r20
     3de:	1f 92       	push	r1
     3e0:	6f 93       	push	r22
     3e2:	1f 92       	push	r1
     3e4:	8f 93       	push	r24
     3e6:	84 e0       	ldi	r24, 0x04	; 4
     3e8:	90 e4       	ldi	r25, 0x40	; 64
     3ea:	9f 93       	push	r25
     3ec:	8f 93       	push	r24
     3ee:	ce 01       	movw	r24, r28
     3f0:	01 96       	adiw	r24, 0x01	; 1
     3f2:	9f 93       	push	r25
     3f4:	8f 93       	push	r24
     3f6:	0e 94 a2 05 	call	0xb44	; 0xb44 <sprintf>
     3fa:	cd bf       	out	0x3d, r28	; 61
     3fc:	de bf       	out	0x3e, r29	; 62
     3fe:	3a c0       	rjmp	.+116    	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     400:	1f 92       	push	r1
     402:	4f 93       	push	r20
     404:	1f 92       	push	r1
     406:	6f 93       	push	r22
     408:	1f 92       	push	r1
     40a:	8f 93       	push	r24
     40c:	80 e1       	ldi	r24, 0x10	; 16
     40e:	90 e4       	ldi	r25, 0x40	; 64
     410:	9f 93       	push	r25
     412:	8f 93       	push	r24
     414:	ce 01       	movw	r24, r28
     416:	01 96       	adiw	r24, 0x01	; 1
     418:	9f 93       	push	r25
     41a:	8f 93       	push	r24
     41c:	0e 94 a2 05 	call	0xb44	; 0xb44 <sprintf>
     420:	cd bf       	out	0x3d, r28	; 61
     422:	de bf       	out	0x3e, r29	; 62
     424:	27 c0       	rjmp	.+78     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     426:	4a 30       	cpi	r20, 0x0A	; 10
     428:	98 f4       	brcc	.+38     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     42a:	1f 92       	push	r1
     42c:	4f 93       	push	r20
     42e:	1f 92       	push	r1
     430:	6f 93       	push	r22
     432:	1f 92       	push	r1
     434:	8f 93       	push	r24
     436:	8b e1       	ldi	r24, 0x1B	; 27
     438:	90 e4       	ldi	r25, 0x40	; 64
     43a:	9f 93       	push	r25
     43c:	8f 93       	push	r24
     43e:	ce 01       	movw	r24, r28
     440:	01 96       	adiw	r24, 0x01	; 1
     442:	9f 93       	push	r25
     444:	8f 93       	push	r24
     446:	0e 94 a2 05 	call	0xb44	; 0xb44 <sprintf>
     44a:	cd bf       	out	0x3d, r28	; 61
     44c:	de bf       	out	0x3e, r29	; 62
     44e:	12 c0       	rjmp	.+36     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     450:	1f 92       	push	r1
     452:	4f 93       	push	r20
     454:	1f 92       	push	r1
     456:	6f 93       	push	r22
     458:	1f 92       	push	r1
     45a:	8f 93       	push	r24
     45c:	86 e2       	ldi	r24, 0x26	; 38
     45e:	90 e4       	ldi	r25, 0x40	; 64
     460:	9f 93       	push	r25
     462:	8f 93       	push	r24
     464:	ce 01       	movw	r24, r28
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	9f 93       	push	r25
     46a:	8f 93       	push	r24
     46c:	0e 94 a2 05 	call	0xb44	; 0xb44 <sprintf>
     470:	cd bf       	out	0x3d, r28	; 61
     472:	de bf       	out	0x3e, r29	; 62
     474:	00 e0       	ldi	r16, 0x00	; 0
     476:	10 e0       	ldi	r17, 0x00	; 0
     478:	2f e3       	ldi	r18, 0x3F	; 63
     47a:	47 e6       	ldi	r20, 0x67	; 103
     47c:	6d e2       	ldi	r22, 0x2D	; 45
     47e:	83 e0       	ldi	r24, 0x03	; 3
     480:	0e 94 46 04 	call	0x88c	; 0x88c <oledC_DrawRectangle>
     484:	ee 24       	eor	r14, r14
     486:	ea 94       	dec	r14
     488:	fe 2c       	mov	r15, r14
     48a:	8e 01       	movw	r16, r28
     48c:	0f 5f       	subi	r16, 0xFF	; 255
     48e:	1f 4f       	sbci	r17, 0xFF	; 255
     490:	22 e0       	ldi	r18, 0x02	; 2
     492:	42 e0       	ldi	r20, 0x02	; 2
     494:	6d e2       	ldi	r22, 0x2D	; 45
     496:	83 e0       	ldi	r24, 0x03	; 3
     498:	0e 94 27 05 	call	0xa4e	; 0xa4e <oledC_DrawString>
     49c:	2a 96       	adiw	r28, 0x0a	; 10
     49e:	cd bf       	out	0x3d, r28	; 61
     4a0:	de bf       	out	0x3e, r29	; 62
     4a2:	df 91       	pop	r29
     4a4:	cf 91       	pop	r28
     4a6:	1f 91       	pop	r17
     4a8:	0f 91       	pop	r16
     4aa:	ff 90       	pop	r15
     4ac:	ef 90       	pop	r14
     4ae:	08 95       	ret

000004b0 <OLED_clearScreen>:
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	60 e6       	ldi	r22, 0x60	; 96
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	0e 94 c0 03 	call	0x780	; 0x780 <oledC_setColumnAddressBounds>
     4bc:	60 e6       	ldi	r22, 0x60	; 96
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	0e 94 a7 03 	call	0x74e	; 0x74e <oledC_setRowAddressBounds>
     4c4:	d0 e6       	ldi	r29, 0x60	; 96
     4c6:	0a c0       	rjmp	.+20     	; 0x4dc <OLED_clearScreen+0x2c>
     4c8:	80 91 32 42 	lds	r24, 0x4232	; 0x804232 <background_color>
     4cc:	90 91 33 42 	lds	r25, 0x4233	; 0x804233 <background_color+0x1>
     4d0:	0e 94 0a 04 	call	0x814	; 0x814 <oledC_sendColorInt>
     4d4:	c1 50       	subi	r28, 0x01	; 1
     4d6:	c1 f7       	brne	.-16     	; 0x4c8 <OLED_clearScreen+0x18>
     4d8:	d1 50       	subi	r29, 0x01	; 1
     4da:	11 f0       	breq	.+4      	; 0x4e0 <OLED_clearScreen+0x30>
     4dc:	c0 e6       	ldi	r28, 0x60	; 96
     4de:	f4 cf       	rjmp	.-24     	; 0x4c8 <OLED_clearScreen+0x18>
     4e0:	df 91       	pop	r29
     4e2:	cf 91       	pop	r28
     4e4:	08 95       	ret

000004e6 <OLED_displaySelection>:
    OLEDC_COLOR_WHITE);
    OLED_displaySelection(SECONDS_SELECTED);
}

void OLED_displaySelection(selection_t selection)
{
     4e6:	ef 92       	push	r14
     4e8:	ff 92       	push	r15
     4ea:	0f 93       	push	r16
     4ec:	1f 93       	push	r17
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	cd b7       	in	r28, 0x3d	; 61
     4f4:	de b7       	in	r29, 0x3e	; 62
     4f6:	2a 97       	sbiw	r28, 0x0a	; 10
     4f8:	cd bf       	out	0x3d, r28	; 61
     4fa:	de bf       	out	0x3e, r29	; 62
    char tempString[BUFF_SIZE];
    if(selection == SECONDS_SELECTED)
     4fc:	81 11       	cpse	r24, r1
     4fe:	0a c0       	rjmp	.+20     	; 0x514 <OLED_displaySelection+0x2e>
        sprintf(tempString, "      --");
     500:	89 e0       	ldi	r24, 0x09	; 9
     502:	ef e2       	ldi	r30, 0x2F	; 47
     504:	f0 e4       	ldi	r31, 0x40	; 64
     506:	de 01       	movw	r26, r28
     508:	11 96       	adiw	r26, 0x01	; 1
     50a:	01 90       	ld	r0, Z+
     50c:	0d 92       	st	X+, r0
     50e:	8a 95       	dec	r24
     510:	e1 f7       	brne	.-8      	; 0x50a <OLED_displaySelection+0x24>
     512:	15 c0       	rjmp	.+42     	; 0x53e <OLED_displaySelection+0x58>
    else if (selection == MINUTES_SELECTED)
     514:	81 30       	cpi	r24, 0x01	; 1
     516:	51 f4       	brne	.+20     	; 0x52c <OLED_displaySelection+0x46>
        sprintf(tempString, "   --   ");
     518:	89 e0       	ldi	r24, 0x09	; 9
     51a:	e8 e3       	ldi	r30, 0x38	; 56
     51c:	f0 e4       	ldi	r31, 0x40	; 64
     51e:	de 01       	movw	r26, r28
     520:	11 96       	adiw	r26, 0x01	; 1
     522:	01 90       	ld	r0, Z+
     524:	0d 92       	st	X+, r0
     526:	8a 95       	dec	r24
     528:	e1 f7       	brne	.-8      	; 0x522 <OLED_displaySelection+0x3c>
     52a:	09 c0       	rjmp	.+18     	; 0x53e <OLED_displaySelection+0x58>
    else
        sprintf(tempString, "--      ");
     52c:	89 e0       	ldi	r24, 0x09	; 9
     52e:	e1 e4       	ldi	r30, 0x41	; 65
     530:	f0 e4       	ldi	r31, 0x40	; 64
     532:	de 01       	movw	r26, r28
     534:	11 96       	adiw	r26, 0x01	; 1
     536:	01 90       	ld	r0, Z+
     538:	0d 92       	st	X+, r0
     53a:	8a 95       	dec	r24
     53c:	e1 f7       	brne	.-8      	; 0x536 <OLED_displaySelection+0x50>
    
    oledC_DrawRectangle(
     53e:	00 e0       	ldi	r16, 0x00	; 0
     540:	10 e0       	ldi	r17, 0x00	; 0
     542:	23 e5       	ldi	r18, 0x53	; 83
     544:	47 e6       	ldi	r20, 0x67	; 103
     546:	61 e4       	ldi	r22, 0x41	; 65
     548:	83 e0       	ldi	r24, 0x03	; 3
     54a:	0e 94 46 04 	call	0x88c	; 0x88c <oledC_DrawRectangle>
    SELECTION_VALUE_X,
    SELECTION_VALUE_Y,
    SELECTION_VALUE_X + BOX_SIZE_X,
    SELECTION_VALUE_Y + BOX_SIZE_Y,
    OLEDC_COLOR_BLACK);
    oledC_DrawString(
     54e:	ee 24       	eor	r14, r14
     550:	ea 94       	dec	r14
     552:	fe 2c       	mov	r15, r14
     554:	8e 01       	movw	r16, r28
     556:	0f 5f       	subi	r16, 0xFF	; 255
     558:	1f 4f       	sbci	r17, 0xFF	; 255
     55a:	22 e0       	ldi	r18, 0x02	; 2
     55c:	42 e0       	ldi	r20, 0x02	; 2
     55e:	61 e4       	ldi	r22, 0x41	; 65
     560:	83 e0       	ldi	r24, 0x03	; 3
     562:	0e 94 27 05 	call	0xa4e	; 0xa4e <oledC_DrawString>
    SELECTION_VALUE_Y,
    FONT_SIZE_X,
    FONT_SIZE_Y,
    (uint8_t *) tempString,
    OLEDC_COLOR_WHITE);
     566:	2a 96       	adiw	r28, 0x0a	; 10
     568:	cd bf       	out	0x3d, r28	; 61
     56a:	de bf       	out	0x3e, r29	; 62
     56c:	df 91       	pop	r29
     56e:	cf 91       	pop	r28
     570:	1f 91       	pop	r17
     572:	0f 91       	pop	r16
     574:	ff 90       	pop	r15
     576:	ef 90       	pop	r14
     578:	08 95       	ret

0000057a <OLED_displayInit>:
    background_color = color;
    OLED_clearScreen();
}

void OLED_displayInit(void)
{
     57a:	ef 92       	push	r14
     57c:	ff 92       	push	r15
     57e:	0f 93       	push	r16
     580:	1f 93       	push	r17
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	cd b7       	in	r28, 0x3d	; 61
     588:	de b7       	in	r29, 0x3e	; 62
     58a:	2a 97       	sbiw	r28, 0x0a	; 10
     58c:	cd bf       	out	0x3d, r28	; 61
     58e:	de bf       	out	0x3e, r29	; 62
    }
}

void OLED_setBackground(uint16_t color)
{
    background_color = color;
     590:	10 92 32 42 	sts	0x4232, r1	; 0x804232 <background_color>
     594:	10 92 33 42 	sts	0x4233, r1	; 0x804233 <background_color+0x1>
    OLED_clearScreen();
     598:	0e 94 58 02 	call	0x4b0	; 0x4b0 <OLED_clearScreen>

void OLED_displayInit(void)
{
    OLED_setBackground(OLEDC_COLOR_BLACK);
    char timeString[BUFF_SIZE];
    sprintf(timeString, "TIME");
     59c:	85 e0       	ldi	r24, 0x05	; 5
     59e:	ea e4       	ldi	r30, 0x4A	; 74
     5a0:	f0 e4       	ldi	r31, 0x40	; 64
     5a2:	de 01       	movw	r26, r28
     5a4:	11 96       	adiw	r26, 0x01	; 1
     5a6:	01 90       	ld	r0, Z+
     5a8:	0d 92       	st	X+, r0
     5aa:	8a 95       	dec	r24
     5ac:	e1 f7       	brne	.-8      	; 0x5a6 <OLED_displayInit+0x2c>
    
    oledC_DrawString(
     5ae:	ee 24       	eor	r14, r14
     5b0:	ea 94       	dec	r14
     5b2:	fe 2c       	mov	r15, r14
     5b4:	8e 01       	movw	r16, r28
     5b6:	0f 5f       	subi	r16, 0xFF	; 255
     5b8:	1f 4f       	sbci	r17, 0xFF	; 255
     5ba:	22 e0       	ldi	r18, 0x02	; 2
     5bc:	42 e0       	ldi	r20, 0x02	; 2
     5be:	69 e1       	ldi	r22, 0x19	; 25
     5c0:	89 e1       	ldi	r24, 0x19	; 25
     5c2:	0e 94 27 05 	call	0xa4e	; 0xa4e <oledC_DrawString>
    TIME_TEXT_Y,
    FONT_SIZE_X,
    FONT_SIZE_Y,
    (uint8_t *) timeString,
    OLEDC_COLOR_WHITE);
    OLED_displaySelection(SECONDS_SELECTED);
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	0e 94 73 02 	call	0x4e6	; 0x4e6 <OLED_displaySelection>
}
     5cc:	2a 96       	adiw	r28, 0x0a	; 10
     5ce:	cd bf       	out	0x3d, r28	; 61
     5d0:	de bf       	out	0x3e, r29	; 62
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	1f 91       	pop	r17
     5d8:	0f 91       	pop	r16
     5da:	ff 90       	pop	r15
     5dc:	ef 90       	pop	r14
     5de:	08 95       	ret

000005e0 <BOD_init>:
int8_t BOD_init()
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
     5e0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	08 95       	ret

000005e8 <CLKCTRL_init>:
	//		 | 0 << CLKCTRL_RUNSTDBY_bp /* Run standby: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	08 95       	ret

000005ec <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	08 95       	ret

000005f0 <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
     5f0:	e0 e1       	ldi	r30, 0x10	; 16
     5f2:	f4 e0       	ldi	r31, 0x04	; 4
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     5f4:	80 81       	ld	r24, Z
     5f6:	88 60       	ori	r24, 0x08	; 8
     5f8:	81 93       	st	Z+, r24
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     5fa:	e8 31       	cpi	r30, 0x18	; 24
     5fc:	84 e0       	ldi	r24, 0x04	; 4
     5fe:	f8 07       	cpc	r31, r24
     600:	c9 f7       	brne	.-14     	; 0x5f4 <mcu_init+0x4>
     602:	e0 e3       	ldi	r30, 0x30	; 48
     604:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     606:	80 81       	ld	r24, Z
     608:	88 60       	ori	r24, 0x08	; 8
     60a:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     60c:	e8 33       	cpi	r30, 0x38	; 56
     60e:	84 e0       	ldi	r24, 0x04	; 4
     610:	f8 07       	cpc	r31, r24
     612:	c9 f7       	brne	.-14     	; 0x606 <mcu_init+0x16>
     614:	e0 e5       	ldi	r30, 0x50	; 80
     616:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     618:	80 81       	ld	r24, Z
     61a:	88 60       	ori	r24, 0x08	; 8
     61c:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     61e:	e8 35       	cpi	r30, 0x58	; 88
     620:	84 e0       	ldi	r24, 0x04	; 4
     622:	f8 07       	cpc	r31, r24
     624:	c9 f7       	brne	.-14     	; 0x618 <mcu_init+0x28>
     626:	e0 e7       	ldi	r30, 0x70	; 112
     628:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     62a:	80 81       	ld	r24, Z
     62c:	88 60       	ori	r24, 0x08	; 8
     62e:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     630:	e8 37       	cpi	r30, 0x78	; 120
     632:	84 e0       	ldi	r24, 0x04	; 4
     634:	f8 07       	cpc	r31, r24
     636:	c9 f7       	brne	.-14     	; 0x62a <mcu_init+0x3a>
     638:	e0 e9       	ldi	r30, 0x90	; 144
     63a:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     63c:	80 81       	ld	r24, Z
     63e:	88 60       	ori	r24, 0x08	; 8
     640:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     642:	e8 39       	cpi	r30, 0x98	; 152
     644:	84 e0       	ldi	r24, 0x04	; 4
     646:	f8 07       	cpc	r31, r24
     648:	c9 f7       	brne	.-14     	; 0x63c <mcu_init+0x4c>
     64a:	e0 eb       	ldi	r30, 0xB0	; 176
     64c:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     64e:	80 81       	ld	r24, Z
     650:	88 60       	ori	r24, 0x08	; 8
     652:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     654:	e8 3b       	cpi	r30, 0xB8	; 184
     656:	84 e0       	ldi	r24, 0x04	; 4
     658:	f8 07       	cpc	r31, r24
     65a:	c9 f7       	brne	.-14     	; 0x64e <mcu_init+0x5e>
     65c:	e0 ed       	ldi	r30, 0xD0	; 208
     65e:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTG + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     660:	80 81       	ld	r24, Z
     662:	88 60       	ori	r24, 0x08	; 8
     664:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     666:	e8 3d       	cpi	r30, 0xD8	; 216
     668:	84 e0       	ldi	r24, 0x04	; 4
     66a:	f8 07       	cpc	r31, r24
     66c:	c9 f7       	brne	.-14     	; 0x660 <mcu_init+0x70>
		*((uint8_t *)&PORTG + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
     66e:	08 95       	ret

00000670 <SPI_MASTER_initialization>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     670:	05 98       	cbi	0x00, 5	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     672:	e5 e1       	ldi	r30, 0x15	; 21
     674:	f4 e0       	ldi	r31, 0x04	; 4
     676:	80 81       	ld	r24, Z
     678:	87 7f       	andi	r24, 0xF7	; 247
     67a:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     67c:	04 9a       	sbi	0x00, 4	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     67e:	0c 98       	cbi	0x01, 4	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     680:	06 9a       	sbi	0x00, 6	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     682:	0e 98       	cbi	0x01, 6	; 1
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	SPI_MASTER_init();
     684:	0e 94 63 05 	call	0xac6	; 0xac6 <SPI_MASTER_init>
     688:	08 95       	ret

0000068a <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     68a:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <mcu_init>
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     68e:	07 9a       	sbi	0x00, 7	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     690:	0f 98       	cbi	0x01, 7	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
     692:	60 9a       	sbi	0x0c, 0	; 12
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
     694:	68 98       	cbi	0x0d, 0	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
     696:	63 9a       	sbi	0x0c, 3	; 12
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
     698:	6b 98       	cbi	0x0d, 3	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
     69a:	66 9a       	sbi	0x0c, 6	; 12
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
     69c:	6e 98       	cbi	0x0d, 6	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
     69e:	67 9a       	sbi	0x0c, 7	; 12
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
     6a0:	6f 98       	cbi	0x0d, 7	; 13
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	CLKCTRL_init();
     6a2:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <CLKCTRL_init>

	SLPCTRL_init();
     6a6:	0e 94 61 05 	call	0xac2	; 0xac2 <SLPCTRL_init>

	CPUINT_init();
     6aa:	0e 94 f6 02 	call	0x5ec	; 0x5ec <CPUINT_init>

	BOD_init();
     6ae:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <BOD_init>

	SPI_MASTER_initialization();
     6b2:	0e 94 38 03 	call	0x670	; 0x670 <SPI_MASTER_initialization>
     6b6:	08 95       	ret

000006b8 <exchangeTwoBytes>:
	DC_PIN_set_level(0);
	stopStreaming();
}
void oledC_sendColor(uint8_t r, uint8_t g, uint8_t b)
{
	oledC_sendColorInt(oledC_parseRGBToInt(r, g, b));
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	d8 2f       	mov	r29, r24
     6be:	c6 2f       	mov	r28, r22
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	0e 94 69 05 	call	0xad2	; 0xad2 <SPI_MASTER_open>
     6c6:	88 23       	and	r24, r24
     6c8:	71 f0       	breq	.+28     	; 0x6e6 <exchangeTwoBytes+0x2e>
     6ca:	8d 2f       	mov	r24, r29
     6cc:	0e 94 84 05 	call	0xb08	; 0xb08 <SPI_MASTER_exchange_byte>
     6d0:	d8 2f       	mov	r29, r24
     6d2:	8c 2f       	mov	r24, r28
     6d4:	0e 94 84 05 	call	0xb08	; 0xb08 <SPI_MASTER_exchange_byte>
     6d8:	c8 2f       	mov	r28, r24
     6da:	0e 94 81 05 	call	0xb02	; 0xb02 <SPI_MASTER_close>
     6de:	8c 2f       	mov	r24, r28
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	9d 2b       	or	r25, r29
     6e4:	02 c0       	rjmp	.+4      	; 0x6ea <exchangeTwoBytes+0x32>
     6e6:	8f ef       	ldi	r24, 0xFF	; 255
     6e8:	9f ef       	ldi	r25, 0xFF	; 255
     6ea:	df 91       	pop	r29
     6ec:	cf 91       	pop	r28
     6ee:	08 95       	ret

000006f0 <oledC_sendCommand>:
     6f0:	0f 93       	push	r16
     6f2:	1f 93       	push	r17
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	c8 2f       	mov	r28, r24
     6fa:	8b 01       	movw	r16, r22
     6fc:	d4 2f       	mov	r29, r20
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	0e 94 69 05 	call	0xad2	; 0xad2 <SPI_MASTER_open>
     704:	88 23       	and	r24, r24
     706:	f1 f0       	breq	.+60     	; 0x744 <oledC_sendCommand+0x54>
     708:	0f 98       	cbi	0x01, 7	; 1
     70a:	68 98       	cbi	0x0d, 0	; 13
     70c:	8c 2f       	mov	r24, r28
     70e:	0e 94 84 05 	call	0xb08	; 0xb08 <SPI_MASTER_exchange_byte>
     712:	dd 23       	and	r29, r29
     714:	31 f0       	breq	.+12     	; 0x722 <oledC_sendCommand+0x32>
     716:	68 9a       	sbi	0x0d, 0	; 13
     718:	6d 2f       	mov	r22, r29
     71a:	c8 01       	movw	r24, r16
     71c:	0e 94 92 05 	call	0xb24	; 0xb24 <SPI_MASTER_write_block>
     720:	68 98       	cbi	0x0d, 0	; 13
     722:	0f 9a       	sbi	0x01, 7	; 1
     724:	0e 94 81 05 	call	0xb02	; 0xb02 <SPI_MASTER_close>
     728:	84 ea       	ldi	r24, 0xA4	; 164
     72a:	8c 0f       	add	r24, r28
     72c:	82 30       	cpi	r24, 0x02	; 2
     72e:	40 f4       	brcc	.+16     	; 0x740 <oledC_sendCommand+0x50>
     730:	cc 35       	cpi	r28, 0x5C	; 92
     732:	11 f0       	breq	.+4      	; 0x738 <oledC_sendCommand+0x48>
     734:	82 e0       	ldi	r24, 0x02	; 2
     736:	01 c0       	rjmp	.+2      	; 0x73a <oledC_sendCommand+0x4a>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	80 93 30 42 	sts	0x4230, r24	; 0x804230 <streamingMode>
     73e:	02 c0       	rjmp	.+4      	; 0x744 <oledC_sendCommand+0x54>
     740:	10 92 30 42 	sts	0x4230, r1	; 0x804230 <streamingMode>
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	0f 91       	pop	r16
     74c:	08 95       	ret

0000074e <oledC_setRowAddressBounds>:
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	00 d0       	rcall	.+0      	; 0x754 <oledC_setRowAddressBounds+0x6>
     754:	cd b7       	in	r28, 0x3d	; 61
     756:	de b7       	in	r29, 0x3e	; 62
     758:	80 36       	cpi	r24, 0x60	; 96
     75a:	08 f0       	brcs	.+2      	; 0x75e <oledC_setRowAddressBounds+0x10>
     75c:	8f e5       	ldi	r24, 0x5F	; 95
     75e:	89 83       	std	Y+1, r24	; 0x01
     760:	60 36       	cpi	r22, 0x60	; 96
     762:	08 f0       	brcs	.+2      	; 0x766 <oledC_setRowAddressBounds+0x18>
     764:	6f e5       	ldi	r22, 0x5F	; 95
     766:	6a 83       	std	Y+2, r22	; 0x02
     768:	42 e0       	ldi	r20, 0x02	; 2
     76a:	be 01       	movw	r22, r28
     76c:	6f 5f       	subi	r22, 0xFF	; 255
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	85 e7       	ldi	r24, 0x75	; 117
     772:	0e 94 78 03 	call	0x6f0	; 0x6f0 <oledC_sendCommand>
     776:	0f 90       	pop	r0
     778:	0f 90       	pop	r0
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	08 95       	ret

00000780 <oledC_setColumnAddressBounds>:
     780:	cf 93       	push	r28
     782:	df 93       	push	r29
     784:	00 d0       	rcall	.+0      	; 0x786 <oledC_setColumnAddressBounds+0x6>
     786:	cd b7       	in	r28, 0x3d	; 61
     788:	de b7       	in	r29, 0x3e	; 62
     78a:	80 36       	cpi	r24, 0x60	; 96
     78c:	08 f0       	brcs	.+2      	; 0x790 <oledC_setColumnAddressBounds+0x10>
     78e:	8f e5       	ldi	r24, 0x5F	; 95
     790:	80 5f       	subi	r24, 0xF0	; 240
     792:	89 83       	std	Y+1, r24	; 0x01
     794:	60 36       	cpi	r22, 0x60	; 96
     796:	08 f0       	brcs	.+2      	; 0x79a <oledC_setColumnAddressBounds+0x1a>
     798:	6f e5       	ldi	r22, 0x5F	; 95
     79a:	60 5f       	subi	r22, 0xF0	; 240
     79c:	6a 83       	std	Y+2, r22	; 0x02
     79e:	42 e0       	ldi	r20, 0x02	; 2
     7a0:	be 01       	movw	r22, r28
     7a2:	6f 5f       	subi	r22, 0xFF	; 255
     7a4:	7f 4f       	sbci	r23, 0xFF	; 255
     7a6:	85 e1       	ldi	r24, 0x15	; 21
     7a8:	0e 94 78 03 	call	0x6f0	; 0x6f0 <oledC_sendCommand>
     7ac:	0f 90       	pop	r0
     7ae:	0f 90       	pop	r0
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	08 95       	ret

000007b6 <oledC_setSleepMode>:
     7b6:	81 11       	cpse	r24, r1
     7b8:	02 c0       	rjmp	.+4      	; 0x7be <oledC_setSleepMode+0x8>
     7ba:	8f ea       	ldi	r24, 0xAF	; 175
     7bc:	01 c0       	rjmp	.+2      	; 0x7c0 <oledC_setSleepMode+0xa>
     7be:	8e ea       	ldi	r24, 0xAE	; 174
     7c0:	40 e0       	ldi	r20, 0x00	; 0
     7c2:	60 e0       	ldi	r22, 0x00	; 0
     7c4:	70 e0       	ldi	r23, 0x00	; 0
     7c6:	0e 94 78 03 	call	0x6f0	; 0x6f0 <oledC_sendCommand>
     7ca:	08 95       	ret

000007cc <oledC_setDisplayOrientation>:
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	1f 92       	push	r1
     7d2:	cd b7       	in	r28, 0x3d	; 61
     7d4:	de b7       	in	r29, 0x3e	; 62
     7d6:	82 e3       	ldi	r24, 0x32	; 50
     7d8:	89 83       	std	Y+1, r24	; 0x01
     7da:	41 e0       	ldi	r20, 0x01	; 1
     7dc:	be 01       	movw	r22, r28
     7de:	6f 5f       	subi	r22, 0xFF	; 255
     7e0:	7f 4f       	sbci	r23, 0xFF	; 255
     7e2:	80 ea       	ldi	r24, 0xA0	; 160
     7e4:	0e 94 78 03 	call	0x6f0	; 0x6f0 <oledC_sendCommand>
     7e8:	80 e2       	ldi	r24, 0x20	; 32
     7ea:	89 83       	std	Y+1, r24	; 0x01
     7ec:	41 e0       	ldi	r20, 0x01	; 1
     7ee:	be 01       	movw	r22, r28
     7f0:	6f 5f       	subi	r22, 0xFF	; 255
     7f2:	7f 4f       	sbci	r23, 0xFF	; 255
     7f4:	81 ea       	ldi	r24, 0xA1	; 161
     7f6:	0e 94 78 03 	call	0x6f0	; 0x6f0 <oledC_sendCommand>
     7fa:	0f 90       	pop	r0
     7fc:	df 91       	pop	r29
     7fe:	cf 91       	pop	r28
     800:	08 95       	ret

00000802 <oledC_startWritingDisplay>:
     802:	40 e0       	ldi	r20, 0x00	; 0
     804:	60 e0       	ldi	r22, 0x00	; 0
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	8c e5       	ldi	r24, 0x5C	; 92
     80a:	0e 94 78 03 	call	0x6f0	; 0x6f0 <oledC_sendCommand>
     80e:	0f 98       	cbi	0x01, 7	; 1
     810:	68 9a       	sbi	0x0d, 0	; 13
     812:	08 95       	ret

00000814 <oledC_sendColorInt>:
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	d8 2f       	mov	r29, r24
     81a:	c9 2f       	mov	r28, r25
     81c:	80 91 30 42 	lds	r24, 0x4230	; 0x804230 <streamingMode>
     820:	81 30       	cpi	r24, 0x01	; 1
     822:	31 f0       	breq	.+12     	; 0x830 <oledC_sendColorInt+0x1c>
     824:	0e 94 01 04 	call	0x802	; 0x802 <oledC_startWritingDisplay>
     828:	80 91 30 42 	lds	r24, 0x4230	; 0x804230 <streamingMode>
     82c:	81 30       	cpi	r24, 0x01	; 1
     82e:	21 f4       	brne	.+8      	; 0x838 <oledC_sendColorInt+0x24>
     830:	6d 2f       	mov	r22, r29
     832:	8c 2f       	mov	r24, r28
     834:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <exchangeTwoBytes>
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	08 95       	ret

0000083e <oledC_setup>:
     83e:	6e 98       	cbi	0x0d, 6	; 13
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
     840:	6f 9a       	sbi	0x0d, 7	; 13
	} else {
		VPORTD.OUT &= ~(1 << pin);
     842:	6b 98       	cbi	0x0d, 3	; 13
     844:	89 ef       	ldi	r24, 0xF9	; 249
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	01 97       	sbiw	r24, 0x01	; 1
     84a:	f1 f7       	brne	.-4      	; 0x848 <oledC_setup+0xa>
     84c:	00 c0       	rjmp	.+0      	; 0x84e <oledC_setup+0x10>
     84e:	00 00       	nop
     850:	6f 98       	cbi	0x0d, 7	; 13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     852:	00 c0       	rjmp	.+0      	; 0x854 <oledC_setup+0x16>
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
     854:	6f 9a       	sbi	0x0d, 7	; 13
     856:	6e 9a       	sbi	0x0d, 6	; 13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     858:	89 ef       	ldi	r24, 0xF9	; 249
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	01 97       	sbiw	r24, 0x01	; 1
     85e:	f1 f7       	brne	.-4      	; 0x85c <oledC_setup+0x1e>
     860:	00 c0       	rjmp	.+0      	; 0x862 <oledC_setup+0x24>
     862:	00 00       	nop
	RST_PIN_set_level(0);
	_delay_us(2);
	RST_PIN_set_level(1);
	EN_PIN_set_level(1);
	_delay_ms(1);
	oledC_setSleepMode(false);
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	0e 94 db 03 	call	0x7b6	; 0x7b6 <oledC_setSleepMode>
     86a:	8f e4       	ldi	r24, 0x4F	; 79
     86c:	93 ec       	ldi	r25, 0xC3	; 195
     86e:	01 97       	sbiw	r24, 0x01	; 1
     870:	f1 f7       	brne	.-4      	; 0x86e <oledC_setup+0x30>
     872:	00 c0       	rjmp	.+0      	; 0x874 <oledC_setup+0x36>
     874:	00 00       	nop
	_delay_ms(200);
	oledC_setColumnAddressBounds(0, MAX_ADDRESS_BOUND);
     876:	6f e5       	ldi	r22, 0x5F	; 95
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	0e 94 c0 03 	call	0x780	; 0x780 <oledC_setColumnAddressBounds>
	oledC_setRowAddressBounds(0, MAX_ADDRESS_BOUND);
     87e:	6f e5       	ldi	r22, 0x5F	; 95
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	0e 94 a7 03 	call	0x74e	; 0x74e <oledC_setRowAddressBounds>
	oledC_setDisplayOrientation();
     886:	0e 94 e6 03 	call	0x7cc	; 0x7cc <oledC_setDisplayOrientation>
     88a:	08 95       	ret

0000088c <oledC_DrawRectangle>:
	                    shape->params.character.y,
	                    shape->params.character.scale_x,
	                    shape->params.character.scale_y,
	                    shape->params.character.character,
	                    shape->params.character.color);
}
     88c:	9f 92       	push	r9
     88e:	af 92       	push	r10
     890:	bf 92       	push	r11
     892:	cf 92       	push	r12
     894:	df 92       	push	r13
     896:	ef 92       	push	r14
     898:	ff 92       	push	r15
     89a:	0f 93       	push	r16
     89c:	1f 93       	push	r17
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
     8a2:	d8 2f       	mov	r29, r24
     8a4:	96 2e       	mov	r9, r22
     8a6:	c4 2e       	mov	r12, r20
     8a8:	e2 2e       	mov	r14, r18
     8aa:	64 2f       	mov	r22, r20
     8ac:	0e 94 c0 03 	call	0x780	; 0x780 <oledC_setColumnAddressBounds>
     8b0:	6e 2d       	mov	r22, r14
     8b2:	89 2d       	mov	r24, r9
     8b4:	0e 94 a7 03 	call	0x74e	; 0x74e <oledC_setRowAddressBounds>
     8b8:	d1 2c       	mov	r13, r1
     8ba:	8f ef       	ldi	r24, 0xFF	; 255
     8bc:	c8 1a       	sub	r12, r24
     8be:	d8 0a       	sbc	r13, r24
     8c0:	8d 2f       	mov	r24, r29
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	8c 15       	cp	r24, r12
     8c6:	9d 05       	cpc	r25, r13
     8c8:	94 f0       	brlt	.+36     	; 0x8ee <oledC_DrawRectangle+0x62>
     8ca:	1b c0       	rjmp	.+54     	; 0x902 <oledC_DrawRectangle+0x76>
     8cc:	c9 2d       	mov	r28, r9
     8ce:	c8 01       	movw	r24, r16
     8d0:	0e 94 0a 04 	call	0x814	; 0x814 <oledC_sendColorInt>
     8d4:	cf 5f       	subi	r28, 0xFF	; 255
     8d6:	8c 2f       	mov	r24, r28
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	8e 15       	cp	r24, r14
     8dc:	9f 05       	cpc	r25, r15
     8de:	bc f3       	brlt	.-18     	; 0x8ce <oledC_DrawRectangle+0x42>
     8e0:	df 5f       	subi	r29, 0xFF	; 255
     8e2:	8d 2f       	mov	r24, r29
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	8c 15       	cp	r24, r12
     8e8:	9d 05       	cpc	r25, r13
     8ea:	3c f0       	brlt	.+14     	; 0x8fa <oledC_DrawRectangle+0x6e>
     8ec:	0a c0       	rjmp	.+20     	; 0x902 <oledC_DrawRectangle+0x76>
     8ee:	f1 2c       	mov	r15, r1
     8f0:	8f ef       	ldi	r24, 0xFF	; 255
     8f2:	e8 1a       	sub	r14, r24
     8f4:	f8 0a       	sbc	r15, r24
     8f6:	a9 2c       	mov	r10, r9
     8f8:	b1 2c       	mov	r11, r1
     8fa:	ae 14       	cp	r10, r14
     8fc:	bf 04       	cpc	r11, r15
     8fe:	34 f3       	brlt	.-52     	; 0x8cc <oledC_DrawRectangle+0x40>
     900:	ef cf       	rjmp	.-34     	; 0x8e0 <oledC_DrawRectangle+0x54>
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	1f 91       	pop	r17
     908:	0f 91       	pop	r16
     90a:	ff 90       	pop	r15
     90c:	ef 90       	pop	r14
     90e:	df 90       	pop	r13
     910:	cf 90       	pop	r12
     912:	bf 90       	pop	r11
     914:	af 90       	pop	r10
     916:	9f 90       	pop	r9
     918:	08 95       	ret

0000091a <oledC_DrawCharacter>:
     91a:	2f 92       	push	r2
     91c:	3f 92       	push	r3
     91e:	4f 92       	push	r4
     920:	5f 92       	push	r5
     922:	6f 92       	push	r6
     924:	7f 92       	push	r7
     926:	8f 92       	push	r8
     928:	9f 92       	push	r9
     92a:	af 92       	push	r10
     92c:	bf 92       	push	r11
     92e:	cf 92       	push	r12
     930:	df 92       	push	r13
     932:	ef 92       	push	r14
     934:	ff 92       	push	r15
     936:	0f 93       	push	r16
     938:	1f 93       	push	r17
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
     93e:	cd b7       	in	r28, 0x3d	; 61
     940:	de b7       	in	r29, 0x3e	; 62
     942:	2f 97       	sbiw	r28, 0x0f	; 15
     944:	cd bf       	out	0x3d, r28	; 61
     946:	de bf       	out	0x3e, r29	; 62
     948:	e0 2f       	mov	r30, r16
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	b0 97       	sbiw	r30, 0x20	; 32
     94e:	df 01       	movw	r26, r30
     950:	aa 0f       	add	r26, r26
     952:	bb 1f       	adc	r27, r27
     954:	aa 0f       	add	r26, r26
     956:	bb 1f       	adc	r27, r27
     958:	ea 0f       	add	r30, r26
     95a:	fb 1f       	adc	r31, r27
     95c:	e1 5b       	subi	r30, 0xB1	; 177
     95e:	ff 4b       	sbci	r31, 0xBF	; 191
     960:	a4 2f       	mov	r26, r20
     962:	b0 e0       	ldi	r27, 0x00	; 0
     964:	8d 01       	movw	r16, r26
     966:	00 0f       	add	r16, r16
     968:	11 1f       	adc	r17, r17
     96a:	00 0f       	add	r16, r16
     96c:	11 1f       	adc	r17, r17
     96e:	18 01       	movw	r2, r16
     970:	2a 0e       	add	r2, r26
     972:	3b 1e       	adc	r3, r27
     974:	21 14       	cp	r2, r1
     976:	31 04       	cpc	r3, r1
     978:	09 f4       	brne	.+2      	; 0x97c <oledC_DrawCharacter+0x62>
     97a:	53 c0       	rjmp	.+166    	; 0xa22 <oledC_DrawCharacter+0x108>
     97c:	e9 82       	std	Y+1, r14	; 0x01
     97e:	fa 82       	std	Y+2, r15	; 0x02
     980:	42 2e       	mov	r4, r18
     982:	4d 83       	std	Y+5, r20	; 0x05
     984:	6d 87       	std	Y+13, r22	; 0x0d
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	a9 01       	movw	r20, r18
     98a:	44 0f       	add	r20, r20
     98c:	55 1f       	adc	r21, r21
     98e:	44 0f       	add	r20, r20
     990:	55 1f       	adc	r21, r21
     992:	44 0f       	add	r20, r20
     994:	55 1f       	adc	r21, r21
     996:	4a 87       	std	Y+10, r20	; 0x0a
     998:	5b 87       	std	Y+11, r21	; 0x0b
     99a:	7a 01       	movw	r14, r20
     99c:	68 2e       	mov	r6, r24
     99e:	81 2c       	mov	r8, r1
     9a0:	91 2c       	mov	r9, r1
     9a2:	59 01       	movw	r10, r18
     9a4:	7a 2c       	mov	r7, r10
     9a6:	71 94       	neg	r7
     9a8:	4a 94       	dec	r4
     9aa:	5d 81       	ldd	r21, Y+5	; 0x05
     9ac:	51 50       	subi	r21, 0x01	; 1
     9ae:	5c 87       	std	Y+12, r21	; 0x0c
     9b0:	cd 01       	movw	r24, r26
     9b2:	8e 83       	std	Y+6, r24	; 0x06
     9b4:	9f 83       	std	Y+7, r25	; 0x07
     9b6:	eb 82       	std	Y+3, r14	; 0x03
     9b8:	fc 82       	std	Y+4, r15	; 0x04
     9ba:	ee 87       	std	Y+14, r30	; 0x0e
     9bc:	ff 87       	std	Y+15, r31	; 0x0f
     9be:	d6 2c       	mov	r13, r6
     9c0:	28 86       	std	Y+8, r2	; 0x08
     9c2:	39 86       	std	Y+9, r3	; 0x09
     9c4:	c7 2c       	mov	r12, r7
     9c6:	34 2c       	mov	r3, r4
     9c8:	ee 85       	ldd	r30, Y+14	; 0x0e
     9ca:	ff 85       	ldd	r31, Y+15	; 0x0f
     9cc:	51 90       	ld	r5, Z+
     9ce:	ee 87       	std	Y+14, r30	; 0x0e
     9d0:	ff 87       	std	Y+15, r31	; 0x0f
     9d2:	0b 81       	ldd	r16, Y+3	; 0x03
     9d4:	1c 81       	ldd	r17, Y+4	; 0x04
     9d6:	01 2b       	or	r16, r17
     9d8:	c9 f0       	breq	.+50     	; 0xa0c <oledC_DrawCharacter+0xf2>
     9da:	4d 84       	ldd	r4, Y+13	; 0x0d
     9dc:	1a 85       	ldd	r17, Y+10	; 0x0a
     9de:	41 0e       	add	r4, r17
     9e0:	6b 80       	ldd	r6, Y+3	; 0x03
     9e2:	7c 80       	ldd	r7, Y+4	; 0x04
     9e4:	fc 84       	ldd	r15, Y+12	; 0x0c
     9e6:	fd 0c       	add	r15, r13
     9e8:	50 fe       	sbrs	r5, 0
     9ea:	09 c0       	rjmp	.+18     	; 0x9fe <oledC_DrawCharacter+0xe4>
     9ec:	09 81       	ldd	r16, Y+1	; 0x01
     9ee:	1a 81       	ldd	r17, Y+2	; 0x02
     9f0:	23 2d       	mov	r18, r3
     9f2:	24 0d       	add	r18, r4
     9f4:	4f 2d       	mov	r20, r15
     9f6:	64 2d       	mov	r22, r4
     9f8:	8d 2d       	mov	r24, r13
     9fa:	0e 94 46 04 	call	0x88c	; 0x88c <oledC_DrawRectangle>
     9fe:	56 94       	lsr	r5
     a00:	6a 18       	sub	r6, r10
     a02:	7b 08       	sbc	r7, r11
     a04:	4c 0c       	add	r4, r12
     a06:	61 14       	cp	r6, r1
     a08:	71 04       	cpc	r7, r1
     a0a:	71 f7       	brne	.-36     	; 0x9e8 <oledC_DrawCharacter+0xce>
     a0c:	8e 81       	ldd	r24, Y+6	; 0x06
     a0e:	9f 81       	ldd	r25, Y+7	; 0x07
     a10:	88 0e       	add	r8, r24
     a12:	99 1e       	adc	r9, r25
     a14:	9d 81       	ldd	r25, Y+5	; 0x05
     a16:	d9 0e       	add	r13, r25
     a18:	e8 85       	ldd	r30, Y+8	; 0x08
     a1a:	f9 85       	ldd	r31, Y+9	; 0x09
     a1c:	8e 16       	cp	r8, r30
     a1e:	9f 06       	cpc	r9, r31
     a20:	98 f2       	brcs	.-90     	; 0x9c8 <oledC_DrawCharacter+0xae>
     a22:	2f 96       	adiw	r28, 0x0f	; 15
     a24:	cd bf       	out	0x3d, r28	; 61
     a26:	de bf       	out	0x3e, r29	; 62
     a28:	df 91       	pop	r29
     a2a:	cf 91       	pop	r28
     a2c:	1f 91       	pop	r17
     a2e:	0f 91       	pop	r16
     a30:	ff 90       	pop	r15
     a32:	ef 90       	pop	r14
     a34:	df 90       	pop	r13
     a36:	cf 90       	pop	r12
     a38:	bf 90       	pop	r11
     a3a:	af 90       	pop	r10
     a3c:	9f 90       	pop	r9
     a3e:	8f 90       	pop	r8
     a40:	7f 90       	pop	r7
     a42:	6f 90       	pop	r6
     a44:	5f 90       	pop	r5
     a46:	4f 90       	pop	r4
     a48:	3f 90       	pop	r3
     a4a:	2f 90       	pop	r2
     a4c:	08 95       	ret

00000a4e <oledC_DrawString>:
		}
	}
}

void oledC_DrawString(uint8_t x, uint8_t y, uint8_t sx, uint8_t sy, uint8_t *string, uint16_t color)
{
     a4e:	7f 92       	push	r7
     a50:	8f 92       	push	r8
     a52:	9f 92       	push	r9
     a54:	af 92       	push	r10
     a56:	bf 92       	push	r11
     a58:	cf 92       	push	r12
     a5a:	df 92       	push	r13
     a5c:	ef 92       	push	r14
     a5e:	ff 92       	push	r15
     a60:	0f 93       	push	r16
     a62:	1f 93       	push	r17
     a64:	cf 93       	push	r28
     a66:	df 93       	push	r29
     a68:	c8 2f       	mov	r28, r24
     a6a:	86 2e       	mov	r8, r22
     a6c:	94 2e       	mov	r9, r20
     a6e:	72 2e       	mov	r7, r18
     a70:	f8 01       	movw	r30, r16
     a72:	57 01       	movw	r10, r14
	while (*string) {
     a74:	00 81       	ld	r16, Z
     a76:	00 23       	and	r16, r16
     a78:	b1 f0       	breq	.+44     	; 0xaa6 <oledC_DrawString+0x58>
     a7a:	d4 2f       	mov	r29, r20
     a7c:	dd 0f       	add	r29, r29
     a7e:	dd 0f       	add	r29, r29
     a80:	d4 0f       	add	r29, r20
     a82:	df 5f       	subi	r29, 0xFF	; 255
     a84:	6f 01       	movw	r12, r30
     a86:	8f ef       	ldi	r24, 0xFF	; 255
     a88:	c8 1a       	sub	r12, r24
     a8a:	d8 0a       	sbc	r13, r24
		oledC_DrawCharacter(x, y, sx, sy, *string++, color);
     a8c:	75 01       	movw	r14, r10
     a8e:	27 2d       	mov	r18, r7
     a90:	49 2d       	mov	r20, r9
     a92:	68 2d       	mov	r22, r8
     a94:	8c 2f       	mov	r24, r28
     a96:	0e 94 8d 04 	call	0x91a	; 0x91a <oledC_DrawCharacter>
		x += OLED_FONT_WIDTH * sx + 1;
     a9a:	cd 0f       	add	r28, r29
	}
}

void oledC_DrawString(uint8_t x, uint8_t y, uint8_t sx, uint8_t sy, uint8_t *string, uint16_t color)
{
	while (*string) {
     a9c:	f6 01       	movw	r30, r12
     a9e:	01 91       	ld	r16, Z+
     aa0:	6f 01       	movw	r12, r30
     aa2:	01 11       	cpse	r16, r1
     aa4:	f3 cf       	rjmp	.-26     	; 0xa8c <oledC_DrawString+0x3e>
		oledC_DrawCharacter(x, y, sx, sy, *string++, color);
		x += OLED_FONT_WIDTH * sx + 1;
	}
}
     aa6:	df 91       	pop	r29
     aa8:	cf 91       	pop	r28
     aaa:	1f 91       	pop	r17
     aac:	0f 91       	pop	r16
     aae:	ff 90       	pop	r15
     ab0:	ef 90       	pop	r14
     ab2:	df 90       	pop	r13
     ab4:	cf 90       	pop	r12
     ab6:	bf 90       	pop	r11
     ab8:	af 90       	pop	r10
     aba:	9f 90       	pop	r9
     abc:	8f 90       	pop	r8
     abe:	7f 90       	pop	r7
     ac0:	08 95       	ret

00000ac2 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	08 95       	ret

00000ac6 <SPI_MASTER_init>:
 * \return Nothing.
 */
void SPI_MASTER_exchange_block(void *block, uint8_t size)
{
	uint8_t *b = (uint8_t *)block;
	while (size--) {
     ac6:	81 e2       	ldi	r24, 0x21	; 33
     ac8:	80 93 40 09 	sts	0x0940, r24	; 0x800940 <__TEXT_REGION_LENGTH__+0x7e0940>
     acc:	10 92 31 42 	sts	0x4231, r1	; 0x804231 <SPI_MASTER_desc>
     ad0:	08 95       	ret

00000ad2 <SPI_MASTER_open>:
     ad2:	90 91 31 42 	lds	r25, 0x4231	; 0x804231 <SPI_MASTER_desc>
     ad6:	91 11       	cpse	r25, r1
     ad8:	12 c0       	rjmp	.+36     	; 0xafe <SPI_MASTER_open+0x2c>
     ada:	91 e0       	ldi	r25, 0x01	; 1
     adc:	90 93 31 42 	sts	0x4231, r25	; 0x804231 <SPI_MASTER_desc>
     ae0:	e8 2f       	mov	r30, r24
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	ee 0f       	add	r30, r30
     ae6:	ff 1f       	adc	r31, r31
     ae8:	ef 5f       	subi	r30, 0xFF	; 255
     aea:	ff 4b       	sbci	r31, 0xBF	; 191
     aec:	80 81       	ld	r24, Z
     aee:	a0 e4       	ldi	r26, 0x40	; 64
     af0:	b9 e0       	ldi	r27, 0x09	; 9
     af2:	8c 93       	st	X, r24
     af4:	81 81       	ldd	r24, Z+1	; 0x01
     af6:	11 96       	adiw	r26, 0x01	; 1
     af8:	8c 93       	st	X, r24
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	08 95       	ret
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	08 95       	ret

00000b02 <SPI_MASTER_close>:
     b02:	10 92 31 42 	sts	0x4231, r1	; 0x804231 <SPI_MASTER_desc>
     b06:	08 95       	ret

00000b08 <SPI_MASTER_exchange_byte>:
     b08:	90 91 31 42 	lds	r25, 0x4231	; 0x804231 <SPI_MASTER_desc>
     b0c:	92 30       	cpi	r25, 0x02	; 2
     b0e:	f1 f3       	breq	.-4      	; 0xb0c <SPI_MASTER_exchange_byte+0x4>
     b10:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
     b14:	e0 e4       	ldi	r30, 0x40	; 64
     b16:	f9 e0       	ldi	r31, 0x09	; 9
     b18:	83 81       	ldd	r24, Z+3	; 0x03
     b1a:	88 23       	and	r24, r24
     b1c:	ec f7       	brge	.-6      	; 0xb18 <SPI_MASTER_exchange_byte+0x10>
     b1e:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
     b22:	08 95       	ret

00000b24 <SPI_MASTER_write_block>:
 * \return Nothing.
 */
void SPI_MASTER_write_block(void *block, uint8_t size)
{
	uint8_t *b = (uint8_t *)block;
	while (size--) {
     b24:	2f ef       	ldi	r18, 0xFF	; 255
     b26:	26 0f       	add	r18, r22
     b28:	66 23       	and	r22, r22
     b2a:	59 f0       	breq	.+22     	; 0xb42 <SPI_MASTER_write_block+0x1e>
     b2c:	a8 2f       	mov	r26, r24
     b2e:	b9 2f       	mov	r27, r25
		SPI0.DATA = *b;
     b30:	e0 e4       	ldi	r30, 0x40	; 64
     b32:	f9 e0       	ldi	r31, 0x09	; 9
     b34:	8d 91       	ld	r24, X+
     b36:	84 83       	std	Z+4, r24	; 0x04
		while (!(SPI0.INTFLAGS & SPI_RXCIF_bm))
     b38:	83 81       	ldd	r24, Z+3	; 0x03
     b3a:	88 23       	and	r24, r24
     b3c:	ec f7       	brge	.-6      	; 0xb38 <SPI_MASTER_write_block+0x14>
 * \return Nothing.
 */
void SPI_MASTER_write_block(void *block, uint8_t size)
{
	uint8_t *b = (uint8_t *)block;
	while (size--) {
     b3e:	21 50       	subi	r18, 0x01	; 1
     b40:	c8 f7       	brcc	.-14     	; 0xb34 <SPI_MASTER_write_block+0x10>
     b42:	08 95       	ret

00000b44 <sprintf>:
     b44:	0f 93       	push	r16
     b46:	1f 93       	push	r17
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	2e 97       	sbiw	r28, 0x0e	; 14
     b52:	cd bf       	out	0x3d, r28	; 61
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0d 89       	ldd	r16, Y+21	; 0x15
     b58:	1e 89       	ldd	r17, Y+22	; 0x16
     b5a:	86 e0       	ldi	r24, 0x06	; 6
     b5c:	8c 83       	std	Y+4, r24	; 0x04
     b5e:	09 83       	std	Y+1, r16	; 0x01
     b60:	1a 83       	std	Y+2, r17	; 0x02
     b62:	8f ef       	ldi	r24, 0xFF	; 255
     b64:	9f e7       	ldi	r25, 0x7F	; 127
     b66:	8d 83       	std	Y+5, r24	; 0x05
     b68:	9e 83       	std	Y+6, r25	; 0x06
     b6a:	ae 01       	movw	r20, r28
     b6c:	47 5e       	subi	r20, 0xE7	; 231
     b6e:	5f 4f       	sbci	r21, 0xFF	; 255
     b70:	6f 89       	ldd	r22, Y+23	; 0x17
     b72:	78 8d       	ldd	r23, Y+24	; 0x18
     b74:	ce 01       	movw	r24, r28
     b76:	01 96       	adiw	r24, 0x01	; 1
     b78:	0e 94 cb 05 	call	0xb96	; 0xb96 <vfprintf>
     b7c:	ef 81       	ldd	r30, Y+7	; 0x07
     b7e:	f8 85       	ldd	r31, Y+8	; 0x08
     b80:	e0 0f       	add	r30, r16
     b82:	f1 1f       	adc	r31, r17
     b84:	10 82       	st	Z, r1
     b86:	2e 96       	adiw	r28, 0x0e	; 14
     b88:	cd bf       	out	0x3d, r28	; 61
     b8a:	de bf       	out	0x3e, r29	; 62
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	1f 91       	pop	r17
     b92:	0f 91       	pop	r16
     b94:	08 95       	ret

00000b96 <vfprintf>:
     b96:	2f 92       	push	r2
     b98:	3f 92       	push	r3
     b9a:	4f 92       	push	r4
     b9c:	5f 92       	push	r5
     b9e:	6f 92       	push	r6
     ba0:	7f 92       	push	r7
     ba2:	8f 92       	push	r8
     ba4:	9f 92       	push	r9
     ba6:	af 92       	push	r10
     ba8:	bf 92       	push	r11
     baa:	cf 92       	push	r12
     bac:	df 92       	push	r13
     bae:	ef 92       	push	r14
     bb0:	ff 92       	push	r15
     bb2:	0f 93       	push	r16
     bb4:	1f 93       	push	r17
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
     bbe:	2b 97       	sbiw	r28, 0x0b	; 11
     bc0:	cd bf       	out	0x3d, r28	; 61
     bc2:	de bf       	out	0x3e, r29	; 62
     bc4:	6c 01       	movw	r12, r24
     bc6:	7b 01       	movw	r14, r22
     bc8:	8a 01       	movw	r16, r20
     bca:	fc 01       	movw	r30, r24
     bcc:	16 82       	std	Z+6, r1	; 0x06
     bce:	17 82       	std	Z+7, r1	; 0x07
     bd0:	83 81       	ldd	r24, Z+3	; 0x03
     bd2:	81 ff       	sbrs	r24, 1
     bd4:	cc c1       	rjmp	.+920    	; 0xf6e <vfprintf+0x3d8>
     bd6:	ce 01       	movw	r24, r28
     bd8:	01 96       	adiw	r24, 0x01	; 1
     bda:	3c 01       	movw	r6, r24
     bdc:	f6 01       	movw	r30, r12
     bde:	93 81       	ldd	r25, Z+3	; 0x03
     be0:	f7 01       	movw	r30, r14
     be2:	93 fd       	sbrc	r25, 3
     be4:	85 91       	lpm	r24, Z+
     be6:	93 ff       	sbrs	r25, 3
     be8:	81 91       	ld	r24, Z+
     bea:	7f 01       	movw	r14, r30
     bec:	88 23       	and	r24, r24
     bee:	09 f4       	brne	.+2      	; 0xbf2 <vfprintf+0x5c>
     bf0:	ba c1       	rjmp	.+884    	; 0xf66 <vfprintf+0x3d0>
     bf2:	85 32       	cpi	r24, 0x25	; 37
     bf4:	39 f4       	brne	.+14     	; 0xc04 <vfprintf+0x6e>
     bf6:	93 fd       	sbrc	r25, 3
     bf8:	85 91       	lpm	r24, Z+
     bfa:	93 ff       	sbrs	r25, 3
     bfc:	81 91       	ld	r24, Z+
     bfe:	7f 01       	movw	r14, r30
     c00:	85 32       	cpi	r24, 0x25	; 37
     c02:	29 f4       	brne	.+10     	; 0xc0e <vfprintf+0x78>
     c04:	b6 01       	movw	r22, r12
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	0e 94 e5 07 	call	0xfca	; 0xfca <fputc>
     c0c:	e7 cf       	rjmp	.-50     	; 0xbdc <vfprintf+0x46>
     c0e:	91 2c       	mov	r9, r1
     c10:	21 2c       	mov	r2, r1
     c12:	31 2c       	mov	r3, r1
     c14:	ff e1       	ldi	r31, 0x1F	; 31
     c16:	f3 15       	cp	r31, r3
     c18:	d8 f0       	brcs	.+54     	; 0xc50 <vfprintf+0xba>
     c1a:	8b 32       	cpi	r24, 0x2B	; 43
     c1c:	79 f0       	breq	.+30     	; 0xc3c <vfprintf+0xa6>
     c1e:	38 f4       	brcc	.+14     	; 0xc2e <vfprintf+0x98>
     c20:	80 32       	cpi	r24, 0x20	; 32
     c22:	79 f0       	breq	.+30     	; 0xc42 <vfprintf+0xac>
     c24:	83 32       	cpi	r24, 0x23	; 35
     c26:	a1 f4       	brne	.+40     	; 0xc50 <vfprintf+0xba>
     c28:	23 2d       	mov	r18, r3
     c2a:	20 61       	ori	r18, 0x10	; 16
     c2c:	1d c0       	rjmp	.+58     	; 0xc68 <vfprintf+0xd2>
     c2e:	8d 32       	cpi	r24, 0x2D	; 45
     c30:	61 f0       	breq	.+24     	; 0xc4a <vfprintf+0xb4>
     c32:	80 33       	cpi	r24, 0x30	; 48
     c34:	69 f4       	brne	.+26     	; 0xc50 <vfprintf+0xba>
     c36:	23 2d       	mov	r18, r3
     c38:	21 60       	ori	r18, 0x01	; 1
     c3a:	16 c0       	rjmp	.+44     	; 0xc68 <vfprintf+0xd2>
     c3c:	83 2d       	mov	r24, r3
     c3e:	82 60       	ori	r24, 0x02	; 2
     c40:	38 2e       	mov	r3, r24
     c42:	e3 2d       	mov	r30, r3
     c44:	e4 60       	ori	r30, 0x04	; 4
     c46:	3e 2e       	mov	r3, r30
     c48:	2a c0       	rjmp	.+84     	; 0xc9e <vfprintf+0x108>
     c4a:	f3 2d       	mov	r31, r3
     c4c:	f8 60       	ori	r31, 0x08	; 8
     c4e:	1d c0       	rjmp	.+58     	; 0xc8a <vfprintf+0xf4>
     c50:	37 fc       	sbrc	r3, 7
     c52:	2d c0       	rjmp	.+90     	; 0xcae <vfprintf+0x118>
     c54:	20 ed       	ldi	r18, 0xD0	; 208
     c56:	28 0f       	add	r18, r24
     c58:	2a 30       	cpi	r18, 0x0A	; 10
     c5a:	40 f0       	brcs	.+16     	; 0xc6c <vfprintf+0xd6>
     c5c:	8e 32       	cpi	r24, 0x2E	; 46
     c5e:	b9 f4       	brne	.+46     	; 0xc8e <vfprintf+0xf8>
     c60:	36 fc       	sbrc	r3, 6
     c62:	81 c1       	rjmp	.+770    	; 0xf66 <vfprintf+0x3d0>
     c64:	23 2d       	mov	r18, r3
     c66:	20 64       	ori	r18, 0x40	; 64
     c68:	32 2e       	mov	r3, r18
     c6a:	19 c0       	rjmp	.+50     	; 0xc9e <vfprintf+0x108>
     c6c:	36 fe       	sbrs	r3, 6
     c6e:	06 c0       	rjmp	.+12     	; 0xc7c <vfprintf+0xe6>
     c70:	8a e0       	ldi	r24, 0x0A	; 10
     c72:	98 9e       	mul	r9, r24
     c74:	20 0d       	add	r18, r0
     c76:	11 24       	eor	r1, r1
     c78:	92 2e       	mov	r9, r18
     c7a:	11 c0       	rjmp	.+34     	; 0xc9e <vfprintf+0x108>
     c7c:	ea e0       	ldi	r30, 0x0A	; 10
     c7e:	2e 9e       	mul	r2, r30
     c80:	20 0d       	add	r18, r0
     c82:	11 24       	eor	r1, r1
     c84:	22 2e       	mov	r2, r18
     c86:	f3 2d       	mov	r31, r3
     c88:	f0 62       	ori	r31, 0x20	; 32
     c8a:	3f 2e       	mov	r3, r31
     c8c:	08 c0       	rjmp	.+16     	; 0xc9e <vfprintf+0x108>
     c8e:	8c 36       	cpi	r24, 0x6C	; 108
     c90:	21 f4       	brne	.+8      	; 0xc9a <vfprintf+0x104>
     c92:	83 2d       	mov	r24, r3
     c94:	80 68       	ori	r24, 0x80	; 128
     c96:	38 2e       	mov	r3, r24
     c98:	02 c0       	rjmp	.+4      	; 0xc9e <vfprintf+0x108>
     c9a:	88 36       	cpi	r24, 0x68	; 104
     c9c:	41 f4       	brne	.+16     	; 0xcae <vfprintf+0x118>
     c9e:	f7 01       	movw	r30, r14
     ca0:	93 fd       	sbrc	r25, 3
     ca2:	85 91       	lpm	r24, Z+
     ca4:	93 ff       	sbrs	r25, 3
     ca6:	81 91       	ld	r24, Z+
     ca8:	7f 01       	movw	r14, r30
     caa:	81 11       	cpse	r24, r1
     cac:	b3 cf       	rjmp	.-154    	; 0xc14 <vfprintf+0x7e>
     cae:	98 2f       	mov	r25, r24
     cb0:	9f 7d       	andi	r25, 0xDF	; 223
     cb2:	95 54       	subi	r25, 0x45	; 69
     cb4:	93 30       	cpi	r25, 0x03	; 3
     cb6:	28 f4       	brcc	.+10     	; 0xcc2 <vfprintf+0x12c>
     cb8:	0c 5f       	subi	r16, 0xFC	; 252
     cba:	1f 4f       	sbci	r17, 0xFF	; 255
     cbc:	9f e3       	ldi	r25, 0x3F	; 63
     cbe:	99 83       	std	Y+1, r25	; 0x01
     cc0:	0d c0       	rjmp	.+26     	; 0xcdc <vfprintf+0x146>
     cc2:	83 36       	cpi	r24, 0x63	; 99
     cc4:	31 f0       	breq	.+12     	; 0xcd2 <vfprintf+0x13c>
     cc6:	83 37       	cpi	r24, 0x73	; 115
     cc8:	71 f0       	breq	.+28     	; 0xce6 <vfprintf+0x150>
     cca:	83 35       	cpi	r24, 0x53	; 83
     ccc:	09 f0       	breq	.+2      	; 0xcd0 <vfprintf+0x13a>
     cce:	59 c0       	rjmp	.+178    	; 0xd82 <vfprintf+0x1ec>
     cd0:	21 c0       	rjmp	.+66     	; 0xd14 <vfprintf+0x17e>
     cd2:	f8 01       	movw	r30, r16
     cd4:	80 81       	ld	r24, Z
     cd6:	89 83       	std	Y+1, r24	; 0x01
     cd8:	0e 5f       	subi	r16, 0xFE	; 254
     cda:	1f 4f       	sbci	r17, 0xFF	; 255
     cdc:	88 24       	eor	r8, r8
     cde:	83 94       	inc	r8
     ce0:	91 2c       	mov	r9, r1
     ce2:	53 01       	movw	r10, r6
     ce4:	13 c0       	rjmp	.+38     	; 0xd0c <vfprintf+0x176>
     ce6:	28 01       	movw	r4, r16
     ce8:	f2 e0       	ldi	r31, 0x02	; 2
     cea:	4f 0e       	add	r4, r31
     cec:	51 1c       	adc	r5, r1
     cee:	f8 01       	movw	r30, r16
     cf0:	a0 80       	ld	r10, Z
     cf2:	b1 80       	ldd	r11, Z+1	; 0x01
     cf4:	36 fe       	sbrs	r3, 6
     cf6:	03 c0       	rjmp	.+6      	; 0xcfe <vfprintf+0x168>
     cf8:	69 2d       	mov	r22, r9
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <vfprintf+0x16c>
     cfe:	6f ef       	ldi	r22, 0xFF	; 255
     d00:	7f ef       	ldi	r23, 0xFF	; 255
     d02:	c5 01       	movw	r24, r10
     d04:	0e 94 da 07 	call	0xfb4	; 0xfb4 <strnlen>
     d08:	4c 01       	movw	r8, r24
     d0a:	82 01       	movw	r16, r4
     d0c:	f3 2d       	mov	r31, r3
     d0e:	ff 77       	andi	r31, 0x7F	; 127
     d10:	3f 2e       	mov	r3, r31
     d12:	16 c0       	rjmp	.+44     	; 0xd40 <vfprintf+0x1aa>
     d14:	28 01       	movw	r4, r16
     d16:	22 e0       	ldi	r18, 0x02	; 2
     d18:	42 0e       	add	r4, r18
     d1a:	51 1c       	adc	r5, r1
     d1c:	f8 01       	movw	r30, r16
     d1e:	a0 80       	ld	r10, Z
     d20:	b1 80       	ldd	r11, Z+1	; 0x01
     d22:	36 fe       	sbrs	r3, 6
     d24:	03 c0       	rjmp	.+6      	; 0xd2c <vfprintf+0x196>
     d26:	69 2d       	mov	r22, r9
     d28:	70 e0       	ldi	r23, 0x00	; 0
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <vfprintf+0x19a>
     d2c:	6f ef       	ldi	r22, 0xFF	; 255
     d2e:	7f ef       	ldi	r23, 0xFF	; 255
     d30:	c5 01       	movw	r24, r10
     d32:	0e 94 cf 07 	call	0xf9e	; 0xf9e <strnlen_P>
     d36:	4c 01       	movw	r8, r24
     d38:	f3 2d       	mov	r31, r3
     d3a:	f0 68       	ori	r31, 0x80	; 128
     d3c:	3f 2e       	mov	r3, r31
     d3e:	82 01       	movw	r16, r4
     d40:	33 fc       	sbrc	r3, 3
     d42:	1b c0       	rjmp	.+54     	; 0xd7a <vfprintf+0x1e4>
     d44:	82 2d       	mov	r24, r2
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	88 16       	cp	r8, r24
     d4a:	99 06       	cpc	r9, r25
     d4c:	b0 f4       	brcc	.+44     	; 0xd7a <vfprintf+0x1e4>
     d4e:	b6 01       	movw	r22, r12
     d50:	80 e2       	ldi	r24, 0x20	; 32
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	0e 94 e5 07 	call	0xfca	; 0xfca <fputc>
     d58:	2a 94       	dec	r2
     d5a:	f4 cf       	rjmp	.-24     	; 0xd44 <vfprintf+0x1ae>
     d5c:	f5 01       	movw	r30, r10
     d5e:	37 fc       	sbrc	r3, 7
     d60:	85 91       	lpm	r24, Z+
     d62:	37 fe       	sbrs	r3, 7
     d64:	81 91       	ld	r24, Z+
     d66:	5f 01       	movw	r10, r30
     d68:	b6 01       	movw	r22, r12
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	0e 94 e5 07 	call	0xfca	; 0xfca <fputc>
     d70:	21 10       	cpse	r2, r1
     d72:	2a 94       	dec	r2
     d74:	21 e0       	ldi	r18, 0x01	; 1
     d76:	82 1a       	sub	r8, r18
     d78:	91 08       	sbc	r9, r1
     d7a:	81 14       	cp	r8, r1
     d7c:	91 04       	cpc	r9, r1
     d7e:	71 f7       	brne	.-36     	; 0xd5c <vfprintf+0x1c6>
     d80:	e8 c0       	rjmp	.+464    	; 0xf52 <vfprintf+0x3bc>
     d82:	84 36       	cpi	r24, 0x64	; 100
     d84:	11 f0       	breq	.+4      	; 0xd8a <vfprintf+0x1f4>
     d86:	89 36       	cpi	r24, 0x69	; 105
     d88:	41 f5       	brne	.+80     	; 0xdda <vfprintf+0x244>
     d8a:	f8 01       	movw	r30, r16
     d8c:	37 fe       	sbrs	r3, 7
     d8e:	07 c0       	rjmp	.+14     	; 0xd9e <vfprintf+0x208>
     d90:	60 81       	ld	r22, Z
     d92:	71 81       	ldd	r23, Z+1	; 0x01
     d94:	82 81       	ldd	r24, Z+2	; 0x02
     d96:	93 81       	ldd	r25, Z+3	; 0x03
     d98:	0c 5f       	subi	r16, 0xFC	; 252
     d9a:	1f 4f       	sbci	r17, 0xFF	; 255
     d9c:	08 c0       	rjmp	.+16     	; 0xdae <vfprintf+0x218>
     d9e:	60 81       	ld	r22, Z
     da0:	71 81       	ldd	r23, Z+1	; 0x01
     da2:	07 2e       	mov	r0, r23
     da4:	00 0c       	add	r0, r0
     da6:	88 0b       	sbc	r24, r24
     da8:	99 0b       	sbc	r25, r25
     daa:	0e 5f       	subi	r16, 0xFE	; 254
     dac:	1f 4f       	sbci	r17, 0xFF	; 255
     dae:	f3 2d       	mov	r31, r3
     db0:	ff 76       	andi	r31, 0x6F	; 111
     db2:	3f 2e       	mov	r3, r31
     db4:	97 ff       	sbrs	r25, 7
     db6:	09 c0       	rjmp	.+18     	; 0xdca <vfprintf+0x234>
     db8:	90 95       	com	r25
     dba:	80 95       	com	r24
     dbc:	70 95       	com	r23
     dbe:	61 95       	neg	r22
     dc0:	7f 4f       	sbci	r23, 0xFF	; 255
     dc2:	8f 4f       	sbci	r24, 0xFF	; 255
     dc4:	9f 4f       	sbci	r25, 0xFF	; 255
     dc6:	f0 68       	ori	r31, 0x80	; 128
     dc8:	3f 2e       	mov	r3, r31
     dca:	2a e0       	ldi	r18, 0x0A	; 10
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	a3 01       	movw	r20, r6
     dd0:	0e 94 21 08 	call	0x1042	; 0x1042 <__ultoa_invert>
     dd4:	88 2e       	mov	r8, r24
     dd6:	86 18       	sub	r8, r6
     dd8:	45 c0       	rjmp	.+138    	; 0xe64 <vfprintf+0x2ce>
     dda:	85 37       	cpi	r24, 0x75	; 117
     ddc:	31 f4       	brne	.+12     	; 0xdea <vfprintf+0x254>
     dde:	23 2d       	mov	r18, r3
     de0:	2f 7e       	andi	r18, 0xEF	; 239
     de2:	b2 2e       	mov	r11, r18
     de4:	2a e0       	ldi	r18, 0x0A	; 10
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	25 c0       	rjmp	.+74     	; 0xe34 <vfprintf+0x29e>
     dea:	93 2d       	mov	r25, r3
     dec:	99 7f       	andi	r25, 0xF9	; 249
     dee:	b9 2e       	mov	r11, r25
     df0:	8f 36       	cpi	r24, 0x6F	; 111
     df2:	c1 f0       	breq	.+48     	; 0xe24 <vfprintf+0x28e>
     df4:	18 f4       	brcc	.+6      	; 0xdfc <vfprintf+0x266>
     df6:	88 35       	cpi	r24, 0x58	; 88
     df8:	79 f0       	breq	.+30     	; 0xe18 <vfprintf+0x282>
     dfa:	b5 c0       	rjmp	.+362    	; 0xf66 <vfprintf+0x3d0>
     dfc:	80 37       	cpi	r24, 0x70	; 112
     dfe:	19 f0       	breq	.+6      	; 0xe06 <vfprintf+0x270>
     e00:	88 37       	cpi	r24, 0x78	; 120
     e02:	21 f0       	breq	.+8      	; 0xe0c <vfprintf+0x276>
     e04:	b0 c0       	rjmp	.+352    	; 0xf66 <vfprintf+0x3d0>
     e06:	e9 2f       	mov	r30, r25
     e08:	e0 61       	ori	r30, 0x10	; 16
     e0a:	be 2e       	mov	r11, r30
     e0c:	b4 fe       	sbrs	r11, 4
     e0e:	0d c0       	rjmp	.+26     	; 0xe2a <vfprintf+0x294>
     e10:	fb 2d       	mov	r31, r11
     e12:	f4 60       	ori	r31, 0x04	; 4
     e14:	bf 2e       	mov	r11, r31
     e16:	09 c0       	rjmp	.+18     	; 0xe2a <vfprintf+0x294>
     e18:	34 fe       	sbrs	r3, 4
     e1a:	0a c0       	rjmp	.+20     	; 0xe30 <vfprintf+0x29a>
     e1c:	29 2f       	mov	r18, r25
     e1e:	26 60       	ori	r18, 0x06	; 6
     e20:	b2 2e       	mov	r11, r18
     e22:	06 c0       	rjmp	.+12     	; 0xe30 <vfprintf+0x29a>
     e24:	28 e0       	ldi	r18, 0x08	; 8
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	05 c0       	rjmp	.+10     	; 0xe34 <vfprintf+0x29e>
     e2a:	20 e1       	ldi	r18, 0x10	; 16
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <vfprintf+0x29e>
     e30:	20 e1       	ldi	r18, 0x10	; 16
     e32:	32 e0       	ldi	r19, 0x02	; 2
     e34:	f8 01       	movw	r30, r16
     e36:	b7 fe       	sbrs	r11, 7
     e38:	07 c0       	rjmp	.+14     	; 0xe48 <vfprintf+0x2b2>
     e3a:	60 81       	ld	r22, Z
     e3c:	71 81       	ldd	r23, Z+1	; 0x01
     e3e:	82 81       	ldd	r24, Z+2	; 0x02
     e40:	93 81       	ldd	r25, Z+3	; 0x03
     e42:	0c 5f       	subi	r16, 0xFC	; 252
     e44:	1f 4f       	sbci	r17, 0xFF	; 255
     e46:	06 c0       	rjmp	.+12     	; 0xe54 <vfprintf+0x2be>
     e48:	60 81       	ld	r22, Z
     e4a:	71 81       	ldd	r23, Z+1	; 0x01
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	0e 5f       	subi	r16, 0xFE	; 254
     e52:	1f 4f       	sbci	r17, 0xFF	; 255
     e54:	a3 01       	movw	r20, r6
     e56:	0e 94 21 08 	call	0x1042	; 0x1042 <__ultoa_invert>
     e5a:	88 2e       	mov	r8, r24
     e5c:	86 18       	sub	r8, r6
     e5e:	fb 2d       	mov	r31, r11
     e60:	ff 77       	andi	r31, 0x7F	; 127
     e62:	3f 2e       	mov	r3, r31
     e64:	36 fe       	sbrs	r3, 6
     e66:	0d c0       	rjmp	.+26     	; 0xe82 <vfprintf+0x2ec>
     e68:	23 2d       	mov	r18, r3
     e6a:	2e 7f       	andi	r18, 0xFE	; 254
     e6c:	a2 2e       	mov	r10, r18
     e6e:	89 14       	cp	r8, r9
     e70:	58 f4       	brcc	.+22     	; 0xe88 <vfprintf+0x2f2>
     e72:	34 fe       	sbrs	r3, 4
     e74:	0b c0       	rjmp	.+22     	; 0xe8c <vfprintf+0x2f6>
     e76:	32 fc       	sbrc	r3, 2
     e78:	09 c0       	rjmp	.+18     	; 0xe8c <vfprintf+0x2f6>
     e7a:	83 2d       	mov	r24, r3
     e7c:	8e 7e       	andi	r24, 0xEE	; 238
     e7e:	a8 2e       	mov	r10, r24
     e80:	05 c0       	rjmp	.+10     	; 0xe8c <vfprintf+0x2f6>
     e82:	b8 2c       	mov	r11, r8
     e84:	a3 2c       	mov	r10, r3
     e86:	03 c0       	rjmp	.+6      	; 0xe8e <vfprintf+0x2f8>
     e88:	b8 2c       	mov	r11, r8
     e8a:	01 c0       	rjmp	.+2      	; 0xe8e <vfprintf+0x2f8>
     e8c:	b9 2c       	mov	r11, r9
     e8e:	a4 fe       	sbrs	r10, 4
     e90:	0f c0       	rjmp	.+30     	; 0xeb0 <vfprintf+0x31a>
     e92:	fe 01       	movw	r30, r28
     e94:	e8 0d       	add	r30, r8
     e96:	f1 1d       	adc	r31, r1
     e98:	80 81       	ld	r24, Z
     e9a:	80 33       	cpi	r24, 0x30	; 48
     e9c:	21 f4       	brne	.+8      	; 0xea6 <vfprintf+0x310>
     e9e:	9a 2d       	mov	r25, r10
     ea0:	99 7e       	andi	r25, 0xE9	; 233
     ea2:	a9 2e       	mov	r10, r25
     ea4:	09 c0       	rjmp	.+18     	; 0xeb8 <vfprintf+0x322>
     ea6:	a2 fe       	sbrs	r10, 2
     ea8:	06 c0       	rjmp	.+12     	; 0xeb6 <vfprintf+0x320>
     eaa:	b3 94       	inc	r11
     eac:	b3 94       	inc	r11
     eae:	04 c0       	rjmp	.+8      	; 0xeb8 <vfprintf+0x322>
     eb0:	8a 2d       	mov	r24, r10
     eb2:	86 78       	andi	r24, 0x86	; 134
     eb4:	09 f0       	breq	.+2      	; 0xeb8 <vfprintf+0x322>
     eb6:	b3 94       	inc	r11
     eb8:	a3 fc       	sbrc	r10, 3
     eba:	11 c0       	rjmp	.+34     	; 0xede <vfprintf+0x348>
     ebc:	a0 fe       	sbrs	r10, 0
     ebe:	06 c0       	rjmp	.+12     	; 0xecc <vfprintf+0x336>
     ec0:	b2 14       	cp	r11, r2
     ec2:	88 f4       	brcc	.+34     	; 0xee6 <vfprintf+0x350>
     ec4:	28 0c       	add	r2, r8
     ec6:	92 2c       	mov	r9, r2
     ec8:	9b 18       	sub	r9, r11
     eca:	0e c0       	rjmp	.+28     	; 0xee8 <vfprintf+0x352>
     ecc:	b2 14       	cp	r11, r2
     ece:	60 f4       	brcc	.+24     	; 0xee8 <vfprintf+0x352>
     ed0:	b6 01       	movw	r22, r12
     ed2:	80 e2       	ldi	r24, 0x20	; 32
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	0e 94 e5 07 	call	0xfca	; 0xfca <fputc>
     eda:	b3 94       	inc	r11
     edc:	f7 cf       	rjmp	.-18     	; 0xecc <vfprintf+0x336>
     ede:	b2 14       	cp	r11, r2
     ee0:	18 f4       	brcc	.+6      	; 0xee8 <vfprintf+0x352>
     ee2:	2b 18       	sub	r2, r11
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <vfprintf+0x354>
     ee6:	98 2c       	mov	r9, r8
     ee8:	21 2c       	mov	r2, r1
     eea:	a4 fe       	sbrs	r10, 4
     eec:	10 c0       	rjmp	.+32     	; 0xf0e <vfprintf+0x378>
     eee:	b6 01       	movw	r22, r12
     ef0:	80 e3       	ldi	r24, 0x30	; 48
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	0e 94 e5 07 	call	0xfca	; 0xfca <fputc>
     ef8:	a2 fe       	sbrs	r10, 2
     efa:	17 c0       	rjmp	.+46     	; 0xf2a <vfprintf+0x394>
     efc:	a1 fc       	sbrc	r10, 1
     efe:	03 c0       	rjmp	.+6      	; 0xf06 <vfprintf+0x370>
     f00:	88 e7       	ldi	r24, 0x78	; 120
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <vfprintf+0x374>
     f06:	88 e5       	ldi	r24, 0x58	; 88
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	b6 01       	movw	r22, r12
     f0c:	0c c0       	rjmp	.+24     	; 0xf26 <vfprintf+0x390>
     f0e:	8a 2d       	mov	r24, r10
     f10:	86 78       	andi	r24, 0x86	; 134
     f12:	59 f0       	breq	.+22     	; 0xf2a <vfprintf+0x394>
     f14:	a1 fe       	sbrs	r10, 1
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <vfprintf+0x386>
     f18:	8b e2       	ldi	r24, 0x2B	; 43
     f1a:	01 c0       	rjmp	.+2      	; 0xf1e <vfprintf+0x388>
     f1c:	80 e2       	ldi	r24, 0x20	; 32
     f1e:	a7 fc       	sbrc	r10, 7
     f20:	8d e2       	ldi	r24, 0x2D	; 45
     f22:	b6 01       	movw	r22, r12
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	0e 94 e5 07 	call	0xfca	; 0xfca <fputc>
     f2a:	89 14       	cp	r8, r9
     f2c:	38 f4       	brcc	.+14     	; 0xf3c <vfprintf+0x3a6>
     f2e:	b6 01       	movw	r22, r12
     f30:	80 e3       	ldi	r24, 0x30	; 48
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	0e 94 e5 07 	call	0xfca	; 0xfca <fputc>
     f38:	9a 94       	dec	r9
     f3a:	f7 cf       	rjmp	.-18     	; 0xf2a <vfprintf+0x394>
     f3c:	8a 94       	dec	r8
     f3e:	f3 01       	movw	r30, r6
     f40:	e8 0d       	add	r30, r8
     f42:	f1 1d       	adc	r31, r1
     f44:	80 81       	ld	r24, Z
     f46:	b6 01       	movw	r22, r12
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	0e 94 e5 07 	call	0xfca	; 0xfca <fputc>
     f4e:	81 10       	cpse	r8, r1
     f50:	f5 cf       	rjmp	.-22     	; 0xf3c <vfprintf+0x3a6>
     f52:	22 20       	and	r2, r2
     f54:	09 f4       	brne	.+2      	; 0xf58 <vfprintf+0x3c2>
     f56:	42 ce       	rjmp	.-892    	; 0xbdc <vfprintf+0x46>
     f58:	b6 01       	movw	r22, r12
     f5a:	80 e2       	ldi	r24, 0x20	; 32
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	0e 94 e5 07 	call	0xfca	; 0xfca <fputc>
     f62:	2a 94       	dec	r2
     f64:	f6 cf       	rjmp	.-20     	; 0xf52 <vfprintf+0x3bc>
     f66:	f6 01       	movw	r30, r12
     f68:	86 81       	ldd	r24, Z+6	; 0x06
     f6a:	97 81       	ldd	r25, Z+7	; 0x07
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <vfprintf+0x3dc>
     f6e:	8f ef       	ldi	r24, 0xFF	; 255
     f70:	9f ef       	ldi	r25, 0xFF	; 255
     f72:	2b 96       	adiw	r28, 0x0b	; 11
     f74:	cd bf       	out	0x3d, r28	; 61
     f76:	de bf       	out	0x3e, r29	; 62
     f78:	df 91       	pop	r29
     f7a:	cf 91       	pop	r28
     f7c:	1f 91       	pop	r17
     f7e:	0f 91       	pop	r16
     f80:	ff 90       	pop	r15
     f82:	ef 90       	pop	r14
     f84:	df 90       	pop	r13
     f86:	cf 90       	pop	r12
     f88:	bf 90       	pop	r11
     f8a:	af 90       	pop	r10
     f8c:	9f 90       	pop	r9
     f8e:	8f 90       	pop	r8
     f90:	7f 90       	pop	r7
     f92:	6f 90       	pop	r6
     f94:	5f 90       	pop	r5
     f96:	4f 90       	pop	r4
     f98:	3f 90       	pop	r3
     f9a:	2f 90       	pop	r2
     f9c:	08 95       	ret

00000f9e <strnlen_P>:
     f9e:	fc 01       	movw	r30, r24
     fa0:	05 90       	lpm	r0, Z+
     fa2:	61 50       	subi	r22, 0x01	; 1
     fa4:	70 40       	sbci	r23, 0x00	; 0
     fa6:	01 10       	cpse	r0, r1
     fa8:	d8 f7       	brcc	.-10     	; 0xfa0 <strnlen_P+0x2>
     faa:	80 95       	com	r24
     fac:	90 95       	com	r25
     fae:	8e 0f       	add	r24, r30
     fb0:	9f 1f       	adc	r25, r31
     fb2:	08 95       	ret

00000fb4 <strnlen>:
     fb4:	fc 01       	movw	r30, r24
     fb6:	61 50       	subi	r22, 0x01	; 1
     fb8:	70 40       	sbci	r23, 0x00	; 0
     fba:	01 90       	ld	r0, Z+
     fbc:	01 10       	cpse	r0, r1
     fbe:	d8 f7       	brcc	.-10     	; 0xfb6 <strnlen+0x2>
     fc0:	80 95       	com	r24
     fc2:	90 95       	com	r25
     fc4:	8e 0f       	add	r24, r30
     fc6:	9f 1f       	adc	r25, r31
     fc8:	08 95       	ret

00000fca <fputc>:
     fca:	0f 93       	push	r16
     fcc:	1f 93       	push	r17
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	fb 01       	movw	r30, r22
     fd4:	23 81       	ldd	r18, Z+3	; 0x03
     fd6:	21 fd       	sbrc	r18, 1
     fd8:	03 c0       	rjmp	.+6      	; 0xfe0 <fputc+0x16>
     fda:	8f ef       	ldi	r24, 0xFF	; 255
     fdc:	9f ef       	ldi	r25, 0xFF	; 255
     fde:	2c c0       	rjmp	.+88     	; 0x1038 <fputc+0x6e>
     fe0:	22 ff       	sbrs	r18, 2
     fe2:	16 c0       	rjmp	.+44     	; 0x1010 <fputc+0x46>
     fe4:	46 81       	ldd	r20, Z+6	; 0x06
     fe6:	57 81       	ldd	r21, Z+7	; 0x07
     fe8:	24 81       	ldd	r18, Z+4	; 0x04
     fea:	35 81       	ldd	r19, Z+5	; 0x05
     fec:	42 17       	cp	r20, r18
     fee:	53 07       	cpc	r21, r19
     ff0:	44 f4       	brge	.+16     	; 0x1002 <fputc+0x38>
     ff2:	a0 81       	ld	r26, Z
     ff4:	b1 81       	ldd	r27, Z+1	; 0x01
     ff6:	9d 01       	movw	r18, r26
     ff8:	2f 5f       	subi	r18, 0xFF	; 255
     ffa:	3f 4f       	sbci	r19, 0xFF	; 255
     ffc:	20 83       	st	Z, r18
     ffe:	31 83       	std	Z+1, r19	; 0x01
    1000:	8c 93       	st	X, r24
    1002:	26 81       	ldd	r18, Z+6	; 0x06
    1004:	37 81       	ldd	r19, Z+7	; 0x07
    1006:	2f 5f       	subi	r18, 0xFF	; 255
    1008:	3f 4f       	sbci	r19, 0xFF	; 255
    100a:	26 83       	std	Z+6, r18	; 0x06
    100c:	37 83       	std	Z+7, r19	; 0x07
    100e:	14 c0       	rjmp	.+40     	; 0x1038 <fputc+0x6e>
    1010:	8b 01       	movw	r16, r22
    1012:	ec 01       	movw	r28, r24
    1014:	fb 01       	movw	r30, r22
    1016:	00 84       	ldd	r0, Z+8	; 0x08
    1018:	f1 85       	ldd	r31, Z+9	; 0x09
    101a:	e0 2d       	mov	r30, r0
    101c:	09 95       	icall
    101e:	89 2b       	or	r24, r25
    1020:	e1 f6       	brne	.-72     	; 0xfda <fputc+0x10>
    1022:	d8 01       	movw	r26, r16
    1024:	16 96       	adiw	r26, 0x06	; 6
    1026:	8d 91       	ld	r24, X+
    1028:	9c 91       	ld	r25, X
    102a:	17 97       	sbiw	r26, 0x07	; 7
    102c:	01 96       	adiw	r24, 0x01	; 1
    102e:	16 96       	adiw	r26, 0x06	; 6
    1030:	8d 93       	st	X+, r24
    1032:	9c 93       	st	X, r25
    1034:	17 97       	sbiw	r26, 0x07	; 7
    1036:	ce 01       	movw	r24, r28
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	1f 91       	pop	r17
    103e:	0f 91       	pop	r16
    1040:	08 95       	ret

00001042 <__ultoa_invert>:
    1042:	fa 01       	movw	r30, r20
    1044:	aa 27       	eor	r26, r26
    1046:	28 30       	cpi	r18, 0x08	; 8
    1048:	51 f1       	breq	.+84     	; 0x109e <__ultoa_invert+0x5c>
    104a:	20 31       	cpi	r18, 0x10	; 16
    104c:	81 f1       	breq	.+96     	; 0x10ae <__ultoa_invert+0x6c>
    104e:	e8 94       	clt
    1050:	6f 93       	push	r22
    1052:	6e 7f       	andi	r22, 0xFE	; 254
    1054:	6e 5f       	subi	r22, 0xFE	; 254
    1056:	7f 4f       	sbci	r23, 0xFF	; 255
    1058:	8f 4f       	sbci	r24, 0xFF	; 255
    105a:	9f 4f       	sbci	r25, 0xFF	; 255
    105c:	af 4f       	sbci	r26, 0xFF	; 255
    105e:	b1 e0       	ldi	r27, 0x01	; 1
    1060:	3e d0       	rcall	.+124    	; 0x10de <__ultoa_invert+0x9c>
    1062:	b4 e0       	ldi	r27, 0x04	; 4
    1064:	3c d0       	rcall	.+120    	; 0x10de <__ultoa_invert+0x9c>
    1066:	67 0f       	add	r22, r23
    1068:	78 1f       	adc	r23, r24
    106a:	89 1f       	adc	r24, r25
    106c:	9a 1f       	adc	r25, r26
    106e:	a1 1d       	adc	r26, r1
    1070:	68 0f       	add	r22, r24
    1072:	79 1f       	adc	r23, r25
    1074:	8a 1f       	adc	r24, r26
    1076:	91 1d       	adc	r25, r1
    1078:	a1 1d       	adc	r26, r1
    107a:	6a 0f       	add	r22, r26
    107c:	71 1d       	adc	r23, r1
    107e:	81 1d       	adc	r24, r1
    1080:	91 1d       	adc	r25, r1
    1082:	a1 1d       	adc	r26, r1
    1084:	20 d0       	rcall	.+64     	; 0x10c6 <__ultoa_invert+0x84>
    1086:	09 f4       	brne	.+2      	; 0x108a <__ultoa_invert+0x48>
    1088:	68 94       	set
    108a:	3f 91       	pop	r19
    108c:	2a e0       	ldi	r18, 0x0A	; 10
    108e:	26 9f       	mul	r18, r22
    1090:	11 24       	eor	r1, r1
    1092:	30 19       	sub	r19, r0
    1094:	30 5d       	subi	r19, 0xD0	; 208
    1096:	31 93       	st	Z+, r19
    1098:	de f6       	brtc	.-74     	; 0x1050 <__ultoa_invert+0xe>
    109a:	cf 01       	movw	r24, r30
    109c:	08 95       	ret
    109e:	46 2f       	mov	r20, r22
    10a0:	47 70       	andi	r20, 0x07	; 7
    10a2:	40 5d       	subi	r20, 0xD0	; 208
    10a4:	41 93       	st	Z+, r20
    10a6:	b3 e0       	ldi	r27, 0x03	; 3
    10a8:	0f d0       	rcall	.+30     	; 0x10c8 <__ultoa_invert+0x86>
    10aa:	c9 f7       	brne	.-14     	; 0x109e <__ultoa_invert+0x5c>
    10ac:	f6 cf       	rjmp	.-20     	; 0x109a <__ultoa_invert+0x58>
    10ae:	46 2f       	mov	r20, r22
    10b0:	4f 70       	andi	r20, 0x0F	; 15
    10b2:	40 5d       	subi	r20, 0xD0	; 208
    10b4:	4a 33       	cpi	r20, 0x3A	; 58
    10b6:	18 f0       	brcs	.+6      	; 0x10be <__ultoa_invert+0x7c>
    10b8:	49 5d       	subi	r20, 0xD9	; 217
    10ba:	31 fd       	sbrc	r19, 1
    10bc:	40 52       	subi	r20, 0x20	; 32
    10be:	41 93       	st	Z+, r20
    10c0:	02 d0       	rcall	.+4      	; 0x10c6 <__ultoa_invert+0x84>
    10c2:	a9 f7       	brne	.-22     	; 0x10ae <__ultoa_invert+0x6c>
    10c4:	ea cf       	rjmp	.-44     	; 0x109a <__ultoa_invert+0x58>
    10c6:	b4 e0       	ldi	r27, 0x04	; 4
    10c8:	a6 95       	lsr	r26
    10ca:	97 95       	ror	r25
    10cc:	87 95       	ror	r24
    10ce:	77 95       	ror	r23
    10d0:	67 95       	ror	r22
    10d2:	ba 95       	dec	r27
    10d4:	c9 f7       	brne	.-14     	; 0x10c8 <__ultoa_invert+0x86>
    10d6:	00 97       	sbiw	r24, 0x00	; 0
    10d8:	61 05       	cpc	r22, r1
    10da:	71 05       	cpc	r23, r1
    10dc:	08 95       	ret
    10de:	9b 01       	movw	r18, r22
    10e0:	ac 01       	movw	r20, r24
    10e2:	0a 2e       	mov	r0, r26
    10e4:	06 94       	lsr	r0
    10e6:	57 95       	ror	r21
    10e8:	47 95       	ror	r20
    10ea:	37 95       	ror	r19
    10ec:	27 95       	ror	r18
    10ee:	ba 95       	dec	r27
    10f0:	c9 f7       	brne	.-14     	; 0x10e4 <__ultoa_invert+0xa2>
    10f2:	62 0f       	add	r22, r18
    10f4:	73 1f       	adc	r23, r19
    10f6:	84 1f       	adc	r24, r20
    10f8:	95 1f       	adc	r25, r21
    10fa:	a0 1d       	adc	r26, r0
    10fc:	08 95       	ret

000010fe <ccp_write_io>:
    10fe:	dc 01       	movw	r26, r24
    1100:	28 ed       	ldi	r18, 0xD8	; 216
    1102:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x7e0034>
    1106:	6c 93       	st	X, r22
    1108:	08 95       	ret

0000110a <_exit>:
    110a:	f8 94       	cli

0000110c <__stop_program>:
    110c:	ff cf       	rjmp	.-2      	; 0x110c <__stop_program>
